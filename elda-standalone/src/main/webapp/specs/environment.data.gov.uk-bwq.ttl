## Common prefixes.
@prefix rdf:              <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:             <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:              <http://www.w3.org/2002/07/owl#> .
@prefix foaf:             <http://xmlns.com/foaf/0.1/> .
@prefix xsd:              <http://www.w3.org/2001/XMLSchema#> .
@prefix api:              <http://purl.org/linked-data/api/vocab#> .
@prefix skos:             <http://www.w3.org/2004/02/skos/core#> .
@prefix geo:              <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix spatialrelations: <http://data.ordnancesurvey.co.uk/ontology/spatialrelations/> .
@prefix geometry:         <http://data.ordnancesurvey.co.uk/ontology/geometry/> .
@prefix onsadmingeo: 	  <http://statistics.data.gov.uk/def/administrative-geography/> .
@prefix osadmingeo:       <http://data.ordnancesurvey.co.uk/ontology/admingeo/> .
@prefix qb:      	      <http://purl.org/linked-data/cube#> .
@prefix time:	 	      <http://www.w3.org/2006/time#> .
@prefix interval:         <http://reference.data.gov.uk/def/intervals/> .
@prefix dgu: 		      <http://reference.data.gov.uk/def/reference/> .
@prefix bw:               <http://environment.data.gov.uk/id/bathing-water/> .
@prefix bwsp:             <http://location.data.gov.uk/so/ef/SamplingPoint/bwsp.eaew/> .
@prefix bwq-iss:          <http://environment.data.gov.uk/data/bathing-water-quality/in-season/slice/> .
@prefix org:              <http://www.w3.org/ns/org#> .
@prefix version:          <http://environment.data.gov.uk/def/version/> .
@prefix stats:            <http://statistics.data.gov.uk/def/administrative-geography/> .

#
@prefix def-bw:           <http://environment.data.gov.uk/def/bathing-water/> .
@prefix def-bwp:          <http://environment.data.gov.uk/def/bathing-water-profile/> .
@prefix def-bwq:          <http://environment.data.gov.uk/def/bathing-water-quality/> .
@prefix def-som:          <http://environment.data.gov.uk/def/bwq-som/> .
@prefix def-stp:          <http://environment.data.gov.uk/def/bwq-stp/> .
#
@prefix def-ef:           <http://location.data.gov.uk/def/ef/SamplingPoint/> .
@prefix def-geom:         <http://location.data.gov.uk/def/common/Geometry/> .
@prefix def-zoi:          <http://location.data.gov.uk/def/ef/ZoneOfInfluence/> .
@prefix def-feature:      <http://location.data.gov.uk/def/ef/BathingWaterProfileFeature/> .
#
@prefix dct:			  <http://purl.org/dc/terms/> .
@prefix t:                <http://environment.data.gov.uk/api-bwq#> .
@prefix void:			  <http://rdfs.org/ns/void#> . 

##
## Epimorphics LDA extensions vocabulary
##
@prefix elda:			  <http://www.epimorphics.com/vocabularies/lda#> .

##deploy-begin
##deploy-end

##not-deploy-begin  
##not-deploy-end

##deploy-begin ################################################################################################################
# <<%= @service_description.data_server_query_endpoint %>> elda:supportsNestedSelect true .
#
#t:api
#    api:base "/"; 
#    api:sparqlEndpoint <<%= @service_description.data_server_query_endpoint %>>;
##  Optional base URI for referencing XSLT/HTML stylesheet resources.
#    api:variable [ api:name "_resourceRoot"         ; api:value "/lda-assets/" ];
#    api:variable [ api:name "visibleSparqlEndpoint" ; api:value "http://environment.data.gov.uk/sparql/bwq/query" ] ;
#    api:variable [ api:name "visibleSparqlForm"     ; api:value "http://environment.data.gov.uk/lab/sparql.html" ] ;
#    api:variable [ api:name "_velocityPath"         ; api:value "/var/www/environment/html/lda-assets/velocity"] ;
#    .
#    
##FORMATTERS
#
#t:HtmlFormatter
#    a api:XsltFormatter ;
#    api:name "html" ;
#    api:mimeType "text/html";
#    elda:metadataOptions "bindings,versions,execution,formats";
#    api:stylesheet "/var/www/environment/html/lda-assets/xslt/environment.xsl" ; 
#    .
#
#t:CsvFormatter
#    a api:XsltFormatter ;
#    api:name "csv" ;
#    api:mimeType "text/csv" ;
#    elda:metadataOptions "bindings,versions,execution,formats";  
#    api:stylesheet "/var/www/environment/html/lda-assets/xslt/environment-csv.xsl" ; 
#    .
#t:VHtmlFormatter
#    a elda:VelocityFormatter
#    ; api:name "vhtml"
#    ; elda:className "com.epimorphics.lda.renderers.VelocityRendererFactory"
#    ; api:mimeType "text/html"
#    # ; elda:velocityTemplate "page-shell.vm"
#    .
##deploy-end ####################################################################################################################


##not-deploy-begin ##############################################################################################################

t:api
    api:base "/"; 
    api:sparqlEndpoint <http://environment.data.gov.uk/sparql/bwq/query>;
#  Optional base URI for referencing XSLT/HTML stylesheet resources.
    api:variable [ api:name "_resourceRoot"         ; api:value "/standalone/lda-assets/" ];
    api:variable [api:name  "_velocityRoot"         ; api:value "lda-assets/velocity/"] ;
# uncomment this line and set appropriate symlink to use development .vm macros
#    api:variable [api:name  "_velocityPath"         ; api:value "/etc/alternatives/elda-velocity"] ;
    api:variable [ api:name "visibleSparqlEndpoint" ; api:value "http://environment.data.gov.uk/sparql/bwq/query" ];
    api:variable [ api:name "visibleSparqlForm"     ; api:value "http://environment.data.gov.uk/lab/sparql.html" ];
    .
    
#FORMATTERS

t:HtmlFormatter
    a api:XsltFormatter ;
    api:name "html" ;
    api:mimeType "text/html";
    elda:metadataOptions "bindings,versions,execution,formats";
    api:stylesheet "/var/www/environment/html/lda-assets/xslt/environment.xsl" ; 
    .

t:CsvFormatter
    a api:XsltFormatter ;
    api:name "csv" ;
    api:mimeType "text/csv" ;
    elda:metadataOptions "bindings,versions,execution,formats";  
    api:stylesheet "/var/www/environment/html/lda-assets/xslt/environment-csv.xsl" ; 
    .

t:VHtmlFormatter
    a elda:VelocityFormatter
    ; api:name "vhtml"
    ; elda:className "com.epimorphics.lda.renderers.VelocityRendererFactory"
    ; api:mimeType "text/html"
    .

##not-deploy-end ################################################################################################################

t:api
	a api:API ;
	rdfs:label "Bathing Water Quality API (environment.data.gov.uk)"@en ;
	api:maxPageSize "200";
    api:lang    "en,none";
    elda:enableETags true;
    elda:cacheExpiryTime  "1h"; 
##    elda:enableCounting "yes" ;
	api:defaultPageSize "10" ;
	api:variable [ api:name "_strip_has"; api:value "yes" ];
    api:variable [ api:name "_suppress_ipto"; api:value "yes" ];
    
    api:variable [ api:name "rewriteURLFrom"; api:value "http://environment.data.gov.uk" ];
    api:variable [ api:name "rewriteURLTo"; api:value "http://localhost:8080/elda-standalone" ];
    
##    api:variable [ api:name "_exceptionIfEmpty"; api:value "no" ];
	api:defaultFormatter t:HtmlFormatter ;

    api:variable    [api:name "bw"; api:type rdfs:Resource; api:value "http://environment.data.gov.uk/id/bathing-water/{eubwid}" ];
    api:variable    [api:name "sp"; api:type rdfs:Resource; api:value "http://location.data.gov.uk/so/ef/SamplingPoint/bwsp.eaew/{bwspid}" ];
    
	api:formatter t:HtmlFormatter,t:CsvFormatter,t:VHtmlFormatter ;
	
	api:endpoint
	    t:scheme,
	    t:scheme-ns,
	    t:scheme-def,
	    t:definition,
	    t:subclasses,
	    t:instances,
	    t:properties,
#		t:thing,
#		t:relatedTo,
		t:bathingWaterUriSet,
		t:bathingWater,
		t:bathingWaters,
		t:bathingWatersNearest,
		t:featuresForBathingWater,
		t:latestInSeasonAssessments,
		t:nearestLatestInSeasonAssessments,
		t:latestInSeasonAssessmentBySamplePoint,
		t:latestInSeasonAssessmentByBathingWater,
		t:individualInSeasonAssessment,
		t:individualInSeasonAssessmentLessRecDate,
		t:inSeasonAssessments,
		t:inSeasonAssessmentsBySamplePoint,
		t:inSeasonAssessmentsByBathingWater,
		t:latestComplianceAssessments,
		t:nearestLatestComplianceAssessments,
		t:latestComplianceAssessmentBySamplePoint,
		t:latestComplianceAssessmentByBathingWater,
		t:individualComplianceAssessment,
		t:complianceAssessments,
		t:complianceAssessmentsBySamplePoint,
		t:complianceAssessmentsByBathingWater,
        t:topDataset,
        t:topDatasets,
		t:datasets,
		t:Dataset,
        t:Subsets,
        t:PilotSubsetDataset, 
        t:PilotSubsetDatasets,
		t:SubsetDataset,
        t:SubsetDatasets,
        t:SubsetDatasetsAlt,
		t:CubeDataset,
#		 t:publisherDatasets,
#        t:complianceDataset,
#        t:complianceSubsets,
#        t:complianceSubsetDataset,
#        t:complianceCubeDataset,
#        t:complianceSubsetDatasets,
#        t:complianceSubsetDatasetsAlt,
		t:inSeasonSlices,
		t:inSeasonByWeekSlices,
		t:inSeasonByWeekSlice,
		t:inSeasonByYearSlices,
		t:inSeasonByYearSlice,
		t:inSeasonByPointYearSlices,
		t:inSeasonByPointYearSlicesByPoint,
		t:inSeasonByPointYearSlice,
		t:inSeasonByPointSlices,
		t:inSeasonByPointSlice,
		t:complianceSlices,
		t:complianceByYearSlices,
		t:complianceByYearSlice,
		t:complianceByPointSlices,
		t:complianceByPointSlice,
		t:latestInSeasonSlice,
		t:suspensions,
		t:suspensionsActiveOnDate,
		t:suspensionsCompletedByDate,
        t:suspensionsByPointActiveOnDate,
        t:suspensionsByPointCompletedByDate,
		t:suspensionsByPoint,
        t:suspensionsByPointLatest,
		t:suspensionsByPointStartDate,
		t:suspensionsByPointStartDateTime,
		t:suspensionsByPointStartDateTimeLatest,
		t:suspension,
        t:suspensionsByBwLatest,
		t:suspensionsByBwActiveOnDate,
        t:suspensionsByBwCompletedByDate,
        t:suspensionsByBw,
        t:suspensionsByBwStartDate,
        t:suspensionsByBwStartDateTime,
        t:suspensionsByBwStartDateTimeLatest
		;
	.

# Viewers #


##############################################################################################
## Definitions
##############################################################################################
t:scheme
  a api:ListEndpoint ;
  rdfs:comment "Returns a paged list of vocabulary terms from a given vocabulary."@en;
  api:uriTemplate "/def/{scheme}" ;
  api:exampleRequestPath  "/def/bathing-water";
  api:variable [ api:name "schemeRegx"; api:value "^http://environment.data.gov.uk/def/{scheme}/" ];
  api:selector t:scheme-selector;
  api:viewer t:definitionViewer, api:describeViewer, api:basicViewer;
  api:defaultViewer t:definitionViewer;
  .
t:scheme-selector
    api:where "{?item a owl:Ontology} UNION {?item a qb:ComponentSpecification} UNION {?item a qb:SliceKey} UNION {?item a qb:DataStructureDefinition} UNION {?item a qb:CodedProperty} UNION {?item a qb:DimensionProperty} UNION {?item a qb:MeasureProperty} UNION {?item a qb:AttributeProperty} UNION {?item a rdf:Property} UNION {?item a owl:ObjectProperty} UNION {?item a owl:DatatypeProperty} UNION {?item a rdfs:Class} UNION {?item a rdfs:Datatype } UNION {?item a owl:Class} UNION {?item a owl:Restriction} UNION {?item a owl:DatatypeProperty} UNION {?item a owl:ObjectProperty} UNION {?item a skos:Concept} UNION {?item a skos:ConceptScheme}  FILTER (regex(STR(?item),?schemeRegx))";
    api:orderBy "str(?item)";
    .

t:scheme-ns
  a api:ItemEndpoint ;
  rdfs:comment "Returns information about the bathing-water vocabulary."@en;
  api:uriTemplate "/def/{scheme}/" ;
  api:itemTemplate "http://environment.data.gov.uk/def/{scheme}/" ;
  api:viewer t:schemeViewer, api:describeViewer, api:basicViewer;
  api:defaultViewer t:schemeViewer;
  .

t:scheme-def
  a	api:ListEndpoint;
  rdfs:comment "Returns a list of vocabularies organised under http://environment.data.gov.uk/def/"@en;
  api:viewer	api:describeViewer, t:schemeViewer, api:basicViewer;
  api:uriTemplate	"/def";
  api:selector [
  	api:where	"{ ?item a owl:Ontology } FILTER (regex(STR(?item),'^http://environment.data.gov.uk/def/'))";
  ];
  api:defaultViewer	t:schemeViewer ;
  .
  
t:schemeViewer
  a api:Viewer ;
  api:name "scheme" ;
  api:properties "name,type,alias,label,note,scopeNote,contributor.who,contributor.mbox,topConcept.name,comment,isDefinedBy.label" ;
  .

t:definition
  a api:ItemEndpoint ;
  rdfs:comment "Returns individual term definitions from a vocabulary"@en;
  api:uriTemplate "/def/{scheme}/{term}" ;
  api:itemTemplate "http://environment.data.gov.uk/def/{scheme}/{term}" ;
  api:viewer t:definitionViewer, api:describeViewer, api:basicViewer;
  api:defaultViewer api:describeViewer ;
  .

t:definitionViewer
  a api:Viewer ;
  api:name "definition" ;
  api:properties "name,type,seeAlso,definition,alias,label,note,scopeNote,topConcept,topConceptOf,broader.name,narrower.name,comment,range,domain,type.label,isDefinedBy.label,subClassOf.label,subPropertyOf.label,sliceKey,component.*,componentProperty,measure,attribute,dimension" ;
  .

t:subclass-selector
    api:where " ?item rdfs:subClassOf ?superclass . " ;
    api:orderBy "STR(?item)";
    .

t:subclasses
  a api:ListEndpoint ;
  rdfs:comment "Lists defined subclasses of a given vocabulary (class) term."@en;
  api:uriTemplate "/def/{scheme}/{term}/subclass" ;
  api:variable [
    api:name "superclass" ;
    api:value "http://environment.data.gov.uk/def/{scheme}/{term}" ;
    api:type rdfs:Resource ;
  ] ;
  api:selector t:subclass-selector ;
  api:viewer t:definitionViewer, api:describeViewer, api:basicViewer;
  api:defaultViewer t:definitionViewer ;
  .

t:instances-selector
    api:where " ?item a ?class . " ;
    api:orderBy "STR(?item)";
    .

t:instances
  a api:ListEndpoint ;
  rdfs:comment "Lists known instances of a given vocabulary (class) term."@en;
  api:uriTemplate "/def/{scheme}/{term}/instance" ;
  api:variable [
    api:name "class" ;
    api:value "http://environment.data.gov.uk/def/{scheme}/{term}" ;
    api:type rdfs:Resource ;
  ] ;
  api:selector t:instances-selector;
  api:viewer t:definitionViewer, api:describeViewer, api:basicViewer;
  api:defaultViewer api:describeViewer ;
  .

t:properties-selector
    api:where "{ select ?thing where { ?thing a ?class } limit 1000} ?thing ?item []." ;
    api:orderBy "STR(?item)";
    .

t:properties
  a api:ListEndpoint ;
  rdfs:comment "Lists properties used in the dataset to describe instances of a given vocabulary (class) term."@en;
  api:uriTemplate "/def/{scheme}/{term}/property" ;
  api:variable [
    api:name "class" ;
    api:value "http://environment.data.gov.uk/def/{scheme}/{term}" ;
    api:type rdfs:Resource ;
  ] ;
  api:selector t:properties-selector;
  api:viewer t:definitionViewer, api:describeViewer, api:basicViewer;
  api:defaultViewer api:describeViewer ;
  .

##############################################################################################
# Any particular thing
##############################################################################################
t:thing
    a   api:ItemEndpoint;
    api:uriTemplate "/thing?resource={uri}";
    api:itemTemplate    "{uri}";
    api:exampleRequestPath  "/thing?uri=http://environment.data.gov.uk/def/bathing-water/BathingWater";
    rdfs:comment "A generic item endpoint to retrieve information about a particular item, {uri}, within the triplestore."@en;
    api:defaultViewer   api:describeViewer;
    api:viewer          api:describeViewer,api:basicViewer,api:labelledDescribeViewer;
    .
    
t:relatedTo
    a   api:ListEndpoint;
    api:uriTemplate "/relatedTo?resource={uri}";
    api:exampleRequestPath  "/relatedTo?resource=http://environment.data.gov.uk/def/bathing-water/BathingWater";
    api:variable [
        api:name "uri";
        api:type rdfs:Resource;
    ];
    rdfs:comment "A generic list endpoint to retrieve information about things within the triplestore that stand in some relation to a particular item, {uri}."@en;
    api:selector [
        api:where "?item ?p ?uri ."
    ];
    api:defaultViewer   api:describeViewer;
    api:viewer          api:describeViewer,api:basicViewer,api:labelledDescribeViewer;
    .
    
##############################################################################################
## Bathing Waters
##############################################################################################
t:bathingWaterUriSet
  a api:ItemEndpoint ;
  rdfs:comment "Returns information about the URISet for designated bathing-waters in England and Wales"@en;
  api:uriTemplate 			"/doc/bathing-water/" ;
  api:exampleRequestPath 	"/doc/bathing-water/" ;
  api:itemTemplate 			"http://environment.data.gov.uk/id/bathing-water/" ;
  api:viewer
  	api:describeViewer,api:labelledDescribeViewer, api:basicViewer;
  api:defaultViewer api:describeViewer .

t:bathingWaters
  a api:ListEndpoint ;
  api:maxPageSize "1000";
  rdfs:comment "List the members of the URISet for designated bathing-waters in England and Wales"@en;
  api:uriTemplate 		    "/doc/bathing-water" ;
  api:exampleRequestPath 	"/doc/bathing-water" ;
  api:itemTemplate          "http://environment.data.gov.uk/id/bathing-water";
  api:viewer
  	t:bathingWaterViewer, t:bathingWaterStpViewer, api:describeViewer, api:labelledDescribeViewer, api:basicViewer;
  api:selector [
    api:filter "type=BathingWater" ;
## Added FILTER EXISTS to eliminate owl:sameAs'd friendly variants from list
    api:filter "exists-samplingPoint=true";
    api:filter "exists-yearDedesignated=false";
    api:sort   "samplingPoint.samplePointNotation";
  ] ;
  api:defaultViewer t:bathingWaterViewer .

t:bathingWater
  a api:ItemEndpoint ;
  rdfs:comment "Returns information about a particular bathing-water"@en;
  api:viewer
  	t:bathingWaterViewer, t:bathingWaterStpViewer,
	api:describeViewer,
	api:labelledDescribeViewer,
	api:basicViewer;
  api:uriTemplate 		"/doc/bathing-water/{eubwid}" ;
  api:exampleRequestPath 	"/doc/bathing-water/ukc2102-03600" ;
  api:itemTemplate      "http://environment.data.gov.uk/id/bathing-water/{eubwid}" ;
  api:defaultViewer     t:bathingWaterViewer .
  
t:bathingWatersNearest
  a api:ListEndpoint ;
  rdfs:comment           "List bathing-waters in order of their linear distance from a given point of interest expresed in terms of OSGB easting and northings."@en;
  api:uriTemplate 		 "/doc/nearest-bathing-water/easting/{easting}/northing/{northing}" ;
  api:exampleRequestPath "/doc/nearest-bathing-water/easting/591200/northing/115406" ;
  api:defaultPageSize   "5";
#  api:maxPageSize       "20";
#  api:variable  [ api:name "northing"; api:type xsd:decimal ], 
#                [ api:name "easting";  api:type xsd:decimal ] ;
  api:viewer
  	t:bathingWaterViewer, t:bathingWaterStpViewer,
  	api:describeViewer,
  	api:labelledDescribeViewer, 
  	api:basicViewer;
  api:selector [
    api:filter "type=BathingWater" ;
    api:filter "exists-yearDedesignated=false";     
#    api:where  "?item def-ef:samplingPoint [ spatialrelations:easting ?e; spatialrelations:northing ?n ] BIND ( ((?e-?easting)*(?e-?easting)+(?n-?northing)*(?n-?northing)) as ?dsquared)";
    api:where  "?item def-ef:samplingPoint [ spatialrelations:easting ?e; spatialrelations:northing ?n ] BIND ( ((?e-?easting^^xsd:decimal)*(?e-?easting^^xsd:decimal)+(?n-?northing^^xsd:decimal)*(?n-?northing^^xsd:decimal)) as ?dsquared)";
    api:orderBy "?dsquared";
  ] ;
  api:defaultViewer t:bathingWaterViewer .

t:bathingWaterViewer
	a	            api:Viewer;
	api:name	      "bathing-water";
	api:properties	"name,type,envelope.label,sedimentTypesPresent,yearDesignated,yearDedesignated,latestProfile,district.name,zoneOfInfluence.name,county.name,country.name,regionalOrganization.name,waterQualityImpactedByHeavyRain,eubwidNotation,uriSet.name,uriSet.label,seeAlso,sameAs,samplingPoint.name,samplingPoint.lat,samplingPoint.long,samplingPoint.easting,samplingPoint.northing,latestSampleAssessment,latestSampleAssessment.sampleClassification.name,latestComplianceAssessment,latestComplianceAssessment.complianceClassification.name,latestRiskPrediction.riskLevel.name,latestRiskPrediction.expiresAt" .

t:bathingWaterStpViewer
    a       api:Viewer;
    api:name    "prediction";
    api:properties  "name,latestRiskPrediction.predictedOn,latestRiskPrediction.predictedAt,latestRiskPrediction.expiresAt,latestRiskPrediction.publishedAt,latestRiskPrediction.riskLevel.name,latestRiskPrediction.comment,latestRiskPrediction.source,latestRiskPrediction.type" ;
    .

t:featuresForBathingWater
    a                         api:ListEndpoint ;    
    rdfs:comment """Return a list of the bathing water features associated with a specified bathing water."""@en ;
    api:uriTemplate           "/doc/bathing-water/{eubwid}/features" ;
    api:exampleRequestPath    "/doc/bathing-water/ukc2102-03600/features" ;    
    api:variable [
        api:name "bw" ;
        api:value "http://environment.data.gov.uk/id/bathing-water/{eubwid}" ;
        api:type rdfs:Resource ;
    ] ;
    api:selector [
        api:where """
           ?item def-bw:bathingWater ?bw . 
           ?item a def-feature:Feature . 
        """ ;
        api:orderBy "STR(?item)";
    ] ;
    api:viewer t:featureViewer ;
    api:viewer api:describeViewer, api:basicViewer;
    api:defaultViewer t:featureViewer ;
    .
    
t:featureViewer
    a               api:Viewer ;
    api:name        "feature" ;
    api:properties  "type,type.label,label,bathingWater,bathingWater.name,versionString,lat,long,easting,northing,regionalOrganization,regionalOrganization.name"
    .
    
##############################################################################################
## In-Season Samples
##############################################################################################
t:inSeasonAssessments
  a	api:ListEndpoint;
  rdfs:comment "Lists in-season sample assessments (in an arbitary order)"@en;
  api:uriTemplate				"/doc/bathing-water-quality/in-season/sample" ;
  api:exampleRequestPath		"/doc/bathing-water-quality/in-season/sample" ;
  api:maxPageSize "1000";
  api:viewer
	t:inSeasonAssessmentViewer,
	t:inSeasonAssessmentValuesViewer,
	t:inSeasonAssessmentValuesCsvViewer,
	t:inSeasonClassificationViewer,
	t:inSeasonColiformCountViewer,
	t:inSeasonStreptococciCountViewer,
	t:inSeasonEntrovirusCountViewer,
	t:inSeasonSalmonellaPresentViewer,
	api:describeViewer, 
	api:basicViewer; 
  api:defaultPageSize		"10";
  api:selector [
    api:filter "type=SampleAssessment";
### Do not sort this API... it will take a long time to give results
#    api:sort "sampleDateTime.inXSDDateTime,bwq_samplingPoint.samplePointNotation";
###
  ] ;
#  api:defaultViewer	api:describeViewer; 
# No Labelled Describe there are more thatn 210k labels to collect.
  api:defaultViewer	t:inSeasonAssessmentValuesViewer;
  .

##############################################################################################
## Top-level dataset
##############################################################################################
t:topDataset 
  a api:ItemEndpoint;
  rdfs:comment "Returns information about an individual top level dataset."@en;
  api:uriTemplate           "/data/{dataset}" ;
  api:exampleRequestPath    "/data/bathing-water-quality" ;
  api:itemTemplate           "http://environment.data.gov.uk/data/{dataset}" ;
  api:viewer
    t:datasetViewer,api:describeViewer,api:basicViewer;
  api:defaultViewer t:datasetViewer;
  .  

t:topDatasets 
  a api:ListEndpoint;
  rdfs:comment "Lists information about the immediate subsets of a top dataset."@en;
  api:uriTemplate           "/data/{dataset}/" ;
  api:exampleRequestPath    "/data/bathing-water-quality/" ;
  api:variable              [ api:name "dsRegex"; api:value "^http://environment.data.gov.uk/data/{dataset}/[^/]*$" ];
  api:selector  [
    api:where   """
    { ?item a void:Dataset } UNION
    { ?item a qb:DataSet } 
    FILTER (regex(STR(?item),?dsRegex))
""";
    api:orderBy     "str(?item)";
  ];
  api:viewer
    t:datasetViewer,api:describeViewer,api:basicViewer;
  api:defaultViewer t:datasetViewer;
  .  

t:datasets 
  a	api:ListEndpoint;
  rdfs:comment "Lists known top-level datasets rooted at http://environment.data.gov.uk/data"@en;
  api:uriTemplate			"/data/" ;
  ## Hook a 303 to get a listing
  api:itemTemplate          "http://environment.data.gov.uk/data";
  api:exampleRequestPath	"/data" ;
  api:selector [
    api:where   "{?item a qb:DataSet } UNION {?item a void:Dataset} FILTER (regex(STR(?item),'^http://environment.data.gov.uk/data/[^/]*$'))";
    api:orderBy "STR(?item)";
  ];
  api:viewer
  	t:datasetViewer,api:describeViewer,api:basicViewer;
  api:defaultViewer	t:datasetViewer;
  .  

t:datasetViewer
    a   api:Viewer;
    api:name "dataset";
    api:properties  "name,label,type,comment,description,created,modified,subset,subset.label,subset.name,dataDump,vocabulary,vocabulary.label,license,source,structure,uriRegexPattern";
    .
##############################################################################################
## in-season subset datasets
##############################################################################################
t:Dataset 
  a	api:ItemEndpoint;
  rdfs:comment              "Returns information about a subset of a top level dataset"@en;
  api:uriTemplate			"/data/{dataset}/{subset}" ;
  api:exampleRequestPath	"/data/bathing-water-quality/in-season" ;
  api:itemTemplate 			"http://environment.data.gov.uk/data/{dataset}/{subset}" ;
  api:viewer
  	t:datasetViewer,api:basicViewer,api:describeViewer ;
  api:defaultViewer	t:datasetViewer;
  .  

t:Subsets 
  a api:ListEndpoint;
  rdfs:comment              "Lists subsets of subses of a top level dataset"@en;
  api:uriTemplate           "/data/{dataset}/{subset}/" ;
  api:exampleRequestPath    "/data/bathing-water-quality/in-season/" ;
  api:variable [ 
    api:name   "ds"; 
    api:value "http://environment.data.gov.uk/data/{dataset}/{subset}";
    api:type  rdfs:Resource 
  ];
  api:selector [
    api:where   "?ds void:subset ?item ."
  ];
  api:viewer
    t:datasetViewer,api:basicViewer,api:describeViewer ;
  api:defaultViewer t:datasetViewer;
  .  

t:PilotSubsetDataset 
  a api:ItemEndpoint;
  rdfs:comment "Returns information about a residual pilot incremental or baseline subset dataset of a dataset."@en;
  api:uriTemplate           "/data/{dataset}/{subset}/dataset-increment/{increment}" ;
  api:itemTemplate          "http://environment.data.gov.uk/data/{dataset}/{subset}/dataset-increment/{increment}" ;
  api:viewer
    t:datasetViewer,api:basicViewer,api:describeViewer ;
  api:defaultViewer t:datasetViewer;
  .  

t:PilotSubsetDatasets 
  a api:ListEndpoint;
  rdfs:comment "Returns a  list of residual pilot incremental or baseline subset dataset of the bathing-water-quality dataset."@en;
  api:uriTemplate           "/data/{dataset}/{subset}/dataset-increment" ;
  api:variable [api:name "regex"; api:value "^http://environment.data.gov.uk/data/{dataset}/{subset}/dataset-increment/";];
  api:selector [
    api:where "{?item a void:Dataset} UNION {?item a qb:DataSet} FILTER (regex(STR(?item),?regex))";
  ];
  api:viewer
    t:datasetViewer,api:basicViewer,api:describeViewer ;
  api:defaultViewer t:datasetViewer;
  .  

##############################################################################################
## per monitoring body/publisher in-season subset datasets
##############################################################################################
t:SubsetDataset 
  a	api:ItemEndpoint;
  rdfs:comment              "Returns information about a particular incremental subset dataset of a dataset."@en;
  api:uriTemplate			"/data/{dataset}/{publisher}/{subset}/dataset-increment/{increment}" ;
  api:itemTemplate 			"http://environment.data.gov.uk/data/{dataset}/{publisher}/{subset}/dataset-increment/{increment}" ;
  api:viewer
  	t:datasetViewer,api:basicViewer,api:describeViewer ;
  api:defaultViewer	t:datasetViewer;
  .  

t:SubsetDatasets 
  a api:ListEndpoint;
  rdfs:comment              "Returns a list of incremental subset datasets of a dataset."@en;
  api:uriTemplate           "/data/{dataset}/{publisher}/{subset}/" ;
  api:exampleRequestPath    "/data/bathing-water-quality/eaew/in-season/" ;
  api:variable [
    api:name "ds"; 
    api:value "http://environment.data.gov.uk/data/{dataset}/{publisher}/{subset}";
    api:type  rdfs:Resource ];
  api:selector [
    api:where "?ds void:subset ?item .";
  ];
  api:viewer
    t:datasetViewer,api:basicViewer,api:describeViewer ;
  api:defaultViewer t:datasetViewer;
  .  

t:SubsetDatasetsAlt 
  a api:ListEndpoint;
  rdfs:comment              "Returns a list of incremental subset datasets of a dataset."@en;
  api:uriTemplate           "/data/{dataset}/{publisher}/{subset}/dataset-increment" ;
  api:exampleRequestPath    "/data/bathing-water-quality/eaew/in-season/dataset-increment" ;
  api:variable [
    api:name "ds"; 
    api:value "http://environment.data.gov.uk/data/{dataset}/{publisher}/{subset}";
    api:type  rdfs:Resource ];
  api:selector [
    api:where "?ds void:subset ?item .";
  ];
  api:viewer
    t:datasetViewer,api:basicViewer,api:describeViewer ;
  api:defaultViewer t:datasetViewer;
  .  

t:CubeDataset 
  a api:ItemEndpoint;
  rdfs:comment              "Returns information about a given publishers top level cube dataset."@en;
  api:uriTemplate           "/data/{dataset}/{publisher}/{subset}" ;
  api:itemTemplate          "http://environment.data.gov.uk/data/{dataset}/{publisher}/{subset}" ;
  api:exampleRequestPath    "/data/bathing-water-quality/eaew/in-season" ;
  api:viewer
    t:datasetViewer,api:basicViewer,api:describeViewer ;
  api:defaultViewer t:datasetViewer;
  .  

##############################################################################################
## Individual In-Season Sample Assessments
##############################################################################################
t:individualInSeasonAssessment
  a	api:ItemEndpoint;
  rdfs:comment "Returns information about a particular in-season bathing water sample assessment."@en;
  api:uriTemplate			"/data/bathing-water-quality/in-season/sample/point/{bwspid}/date/{date}/time/{time}/recordDate/{recDate}" ;
  api:exampleRequestPath	"/data/bathing-water-quality/in-season/sample/point/38660/date/20100917/time/110500/recordDate/20110111" ;
  api:itemTemplate 			"http://environment.data.gov.uk/data/bathing-water-quality/in-season/sample/point/{bwspid}/date/{date}/time/{time}/recordDate/{recDate}" ;
  api:viewer
	t:inSeasonAssessmentViewer,
	t:inSeasonAssessmentValuesViewer,
    t:inSeasonAssessmentValuesCsvViewer,
	t:inSeasonClassificationViewer,
	t:inSeasonColiformCountViewer,
	t:inSeasonStreptococciCountViewer,
	t:inSeasonEntrovirusCountViewer,
	t:inSeasonSalmonellaPresentViewer,
    t:inSeasonEscherichiaColiViewer,
    t:inSeasonIntestinalEnterococciViewer,
	api:describeViewer,
	api:basicViewer; 
#  api:defaultViewer	api:describeViewer;
   api:defaultViewer	t:inSeasonAssessmentViewer;
  .
  
t:individualInSeasonAssessmentLessRecDate
  a	api:ListEndpoint;
  rdfs:comment "Lists in-season sample assessments that pertain to the same bathing-water sample. Assessments may have a status of new, replacement or withdrawal reflecting changes in the assessment made of a given water sample."@en;
  api:uriTemplate			"/data/bathing-water-quality/in-season/sample/point/{bwspid}/date/{date}/time/{time}/recordDate" ;
  api:exampleRequestPath	"/data/bathing-water-quality/in-season/sample/point/38660/date/20100917/time/110500/recordDate" ;
  api:variable [ api:name "stem";
                 api:value "^http://environment.data.gov.uk/data/bathing-water-quality/in-season/sample/point/{bwspid}/date/{date}/time/{time}/recordDate";
               ],[
                 api:name "sp";
                 api:type   rdfs:Resource;
                 api:value "http://location.data.gov.uk/so/ef/SamplingPoint/bwsp.eaew/{bwspid}";
               ]; 
  api:selector [
  	api:where  "?item a def-bwq:SampleAssessment; def-bwq:samplingPoint ?sp. FILTER (regex(str(?item),?stem))";
  ];
  api:viewer
	t:inSeasonAssessmentViewer,
	t:inSeasonAssessmentValuesViewer,
    t:inSeasonAssessmentValuesCsvViewer,
	t:inSeasonClassificationViewer,
	t:inSeasonColiformCountViewer,
	t:inSeasonStreptococciCountViewer,
	t:inSeasonEntrovirusCountViewer,
	t:inSeasonSalmonellaPresentViewer,
    t:inSeasonEscherichiaColiViewer,
    t:inSeasonIntestinalEnterococciViewer,
	api:describeViewer,
	api:basicViewer; 
#  api:defaultViewer	api:describeViewer;
   api:defaultViewer	t:inSeasonAssessmentViewer;
  .
  
##############################################################################################
## In-Season Samples by Sampling Point
##############################################################################################
t:inSeasonAssessmentsBySamplePoint
  a	api:ListEndpoint;
  rdfs:comment "Lists in-season sample assessments taken at a given bathing-water sampling point. Replaced or withdrawn assessments are omitted. By default assessments are ordered by the sample date and time of the water sample, earliest first."@en;
  api:uriTemplate			    "/doc/bathing-water-quality/in-season/point/{bwspid}" ;
  api:exampleRequestPath		"/doc/bathing-water-quality/in-season/point/03600" ;
  api:maxPageSize "1000";
  api:viewer
	t:inSeasonAssessmentViewer,
	t:inSeasonAssessmentValuesViewer,
    t:inSeasonAssessmentValuesCsvViewer,
	t:inSeasonClassificationViewer,
	t:inSeasonColiformCountViewer,
	t:inSeasonStreptococciCountViewer,
	t:inSeasonEntrovirusCountViewer,
	t:inSeasonSalmonellaPresentViewer,
    t:inSeasonEscherichiaColiViewer,
    t:inSeasonIntestinalEnterococciViewer,
	api:describeViewer,
	api:basicViewer; 
  api:defaultPageSize		"10";
  api:variable [ api:name   "sp";
                 api:type   rdfs:Resource;
                 api:value  "http://location.data.gov.uk/so/ef/SamplingPoint/bwsp.eaew/{bwspid}";
               ];
  api:selector [
    api:where """
    ?item a def-bwq:SampleAssessment;
        def-bwq:samplingPoint ?sp . 
    FILTER NOT EXISTS {?item dct:isReplacedBy ?item2}
    FILTER NOT EXISTS {?item def-bwq:recordStatus def-bwq:withdrawal}
""";
    api:sort "sampleDateTime.inXSDDateTime";
  ] ;
  api:defaultViewer	api:describeViewer;
#  api:defaultViewer	t:inSeasonAssessmentValuesViewer;
  .  
	

##############################################################################################
## In-Season Samples by Bathing Water
##############################################################################################
t:inSeasonAssessmentsByBathingWater
  a	api:ListEndpoint;
  rdfs:comment "Lists in-season sample assessments taken for a given bathing-water. Replaced or withdrawn assessments are omitted. By default assessments are ordered by the sample date and time of the water sample, earliest first."@en;
  api:uriTemplate			    "/doc/bathing-water-quality/in-season/bathing-water/{eubwid}" ;
  api:exampleRequestPath		"/doc/bathing-water-quality/in-season/bathing-water/ukc2102-03600" ;
  api:maxPageSize "1000";
  api:viewer
	t:inSeasonAssessmentViewer,
	t:inSeasonAssessmentValuesViewer,
    t:inSeasonAssessmentValuesCsvViewer,
	t:inSeasonClassificationViewer,
	t:inSeasonColiformCountViewer,
	t:inSeasonStreptococciCountViewer,
	t:inSeasonEntrovirusCountViewer,
	t:inSeasonSalmonellaPresentViewer,
    t:inSeasonEscherichiaColiViewer,
    t:inSeasonIntestinalEnterococciViewer,
	api:describeViewer,
	api:basicViewer; 
  api:defaultPageSize		"10";
#  api:variable  [ api:name  "bw";
#                  api:type  rdfs:Resource;
#                  api:value "http://environment.data.gov.uk/id/bathing-water/{eubwid}";
#               ];
  api:selector [
    api:where """
    ?item a def-bwq:SampleAssessment;
        def-bwq:bathingWater ?bw . 
     FILTER NOT EXISTS {?item dct:isReplacedBy ?item2}
     FILTER NOT EXISTS {?item def-bwq:recordStatus def-bwq:withdrawal}
""";
    api:sort "sampleDateTime.inXSDDateTime";
  ] ;
  api:defaultViewer	api:describeViewer;
#  api:defaultViewer	t:inSeasonAssessmentValuesViewer;
  .

##############################################################################################
## Lastest In-Season Samples
##############################################################################################
t:latestInSeasonAssessments
  a	api:ListEndpoint;
  rdfs:comment "Lists the most recent unreplaced, unwithdrawn in-season sample assessments available at each designated bathing-water."@en;
  api:uriTemplate			    "/doc/bathing-water-quality/in-season/latest" ;
  api:exampleRequestPath		"/doc/bathing-water-quality/in-season/latest" ;
  api:defaultPageSize			"10";
  api:maxPageSize				"1000";
  api:viewer
	t:inSeasonAssessmentViewer,
	t:inSeasonAssessmentValuesViewer,
    t:inSeasonAssessmentValuesCsvViewer,
	t:inSeasonClassificationViewer,
	t:inSeasonColiformCountViewer,
	t:inSeasonStreptococciCountViewer,
	t:inSeasonEntrovirusCountViewer,
	t:inSeasonSalmonellaPresentViewer,
    t:inSeasonEscherichiaColiViewer,
    t:inSeasonIntestinalEnterococciViewer,
	api:describeViewer,
	api:basicViewer; 
  api:selector [
    api:where "bwq-iss:latest qb:observation ?item.";
#    api:filter "exists-bwq_bathingWater.yearDedesignated=false";     
	api:sort	"bwq_samplingPoint.samplePointNotation";
    
  ] ;
  api:defaultViewer	t:inSeasonAssessmentViewer;
  .
  
t:nearestLatestInSeasonAssessments
  a	api:ListEndpoint;
  rdfs:comment "Lists the most recent unreplaced, unwithdrawn in-season sample assessments ordered by increasing linear distance from a point-of-interest expressed using OSGB easting and northing coordinates."@en;
  api:uriTemplate			    "/doc/bathing-water-quality/in-season/latest-nearest/easting/{easting}/northing/{northing}" ;
  api:exampleRequestPath		"/doc/bathing-water-quality/in-season/latest-nearest/easting/591200/northing/115406";
  api:defaultPageSize			"5";
#  api:maxPageSize				"20";
  api:viewer
	t:inSeasonAssessmentViewer,
	t:inSeasonAssessmentValuesViewer,
    t:inSeasonAssessmentValuesCsvViewer,
	t:inSeasonClassificationViewer,
	t:inSeasonColiformCountViewer,
	t:inSeasonStreptococciCountViewer,
	t:inSeasonEntrovirusCountViewer,
	t:inSeasonSalmonellaPresentViewer,
    t:inSeasonEscherichiaColiViewer,
    t:inSeasonIntestinalEnterococciViewer,
	api:describeViewer,
	api:basicViewer; 
  api:selector [
#    api:filter "exists-bwq_bathingWater.yearDedesignated=false";     
    api:where   """bwq-iss:latest qb:observation ?item . 
?item def-bwq:samplingPoint [ spatialrelations:easting ?e; spatialrelations:northing ?n ] 
BIND ( ((?e-?easting^^xsd:decimal)*
        (?e-?easting^^xsd:decimal)+
        (?n-?northing^^xsd:decimal)*
        (?n-?northing^^xsd:decimal)) as ?dsquared)""";
    api:orderBy "?dsquared";       
  ] ;
  api:defaultViewer	t:inSeasonAssessmentViewer;
  .
  
 
##############################################################################################
# Latest in-season sample assessment by sampling point.
##############################################################################################
t:latestInSeasonAssessmentBySamplePoint
  a	api:ListEndpoint;
  rdfs:comment "Lists the most recent unreplaced, unwithdrawn in-season sample assessment of a water sample taken at a given bathing-water sampling point."@en;
  api:uriTemplate			    "/doc/bathing-water-quality/in-season/point/{bwspid}/latest" ;
  api:exampleRequestPath		"/doc/bathing-water-quality/in-season/point/19100/latest" ;
  api:viewer
	t:inSeasonAssessmentViewer,
	t:inSeasonAssessmentValuesViewer,
    t:inSeasonAssessmentValuesCsvViewer,
	t:inSeasonClassificationViewer,
	t:inSeasonColiformCountViewer,
	t:inSeasonStreptococciCountViewer,
	t:inSeasonEntrovirusCountViewer,
	t:inSeasonSalmonellaPresentViewer,
	t:inSeasonEscherichiaColiViewer,
    t:inSeasonIntestinalEnterococciViewer,
	api:describeViewer,
	api:basicViewer;
  api:variable [ api:name   "sp";
                 api:type   rdfs:Resource;
                 api:value  "http://location.data.gov.uk/so/ef/SamplingPoint/bwsp.eaew/{bwspid}";
               ];
  api:selector [
  	  	api:where  """
bwq-iss:latest qb:observation    ?item . 
?item          def-bwq:samplingPoint ?sp .
""";
  ];
  api:defaultViewer	t:inSeasonAssessmentViewer;
  .

##############################################################################################
# Latest in-season sample assessment by bathing water.
##############################################################################################
t:latestInSeasonAssessmentByBathingWater
  a	api:ListEndpoint;
  rdfs:comment "Lists the most recent unreplaced, unwithdrawn in-season sample assessment of a water sample taken for a given bathing-water."@en;
  api:uriTemplate			    "/doc/bathing-water-quality/in-season/bathing-water/{eubwid}/latest" ;
  api:exampleRequestPath		"/doc/bathing-water-quality/in-season/bathing-water/ukc2102-03600/latest" ;
  api:viewer
	t:inSeasonAssessmentViewer,
	t:inSeasonAssessmentValuesViewer,
    t:inSeasonAssessmentValuesCsvViewer,
	t:inSeasonClassificationViewer,
	t:inSeasonColiformCountViewer,
	t:inSeasonStreptococciCountViewer,
	t:inSeasonEntrovirusCountViewer,
	t:inSeasonSalmonellaPresentViewer,
    t:inSeasonEscherichiaColiViewer,
    t:inSeasonIntestinalEnterococciViewer,
	api:describeViewer,
	api:basicViewer;
  api:variable  [ api:name  "bw";
                  api:type  rdfs:Resource;
                  api:value "http://environment.data.gov.uk/id/bathing-water/{eubwid}";
               ];
  api:selector [
  	  	api:where  """
bwq-iss:latest qb:observation   ?item .
?item          def-bwq:bathingWater ?bw .
""";
  ];
  api:defaultViewer	t:inSeasonAssessmentViewer;
  .
  
##############################################################################################
# In-season sample assessment viewers 
##############################################################################################
t:inSeasonAssessmentViewer
	a				api:Viewer;
	api:name		"location";
	api:properties	"label,type,source,dataset,bwq_samplingPoint.samplePointNotation,bwq_samplingPoint.name,bwq_samplingPoint.easting,bwq_samplingPoint.northing,bwq_samplingPoint.lat,bwq_samplingPoint.long,bwq_bathingWater.name,bwq_bathingWater.eubwidNotation,sampleDateTime.inXSDDateTime,sampleWeek.label,sampleClassification.complianceCodeNotation,sampleClassification.name,totalColiformQualifier.countQualifierNotation,totalColiformCount,faecalColiformQualifier.countQualifierNotation,faecalColiformCount,faecalStreptococciQualifier.countQualifierNotation,faecalStreptococciCount,entrovirusQualifier.countQualifierNotation,entrovirusCount,escherichiaColiCount,escherichiaColiQualifier.countQualifierNotation,intestinalEnterococciCount,intestinalEnterococciQualifier.countQualifierNotation,salmonellaPresent.name,salmonellaPresent.presenceNotation,abnormalWeatherException" .
	
t:inSeasonAssessmentValuesViewer
	a				api:Viewer;
	api:name		"assessment";
	api:properties	"label,type,source,dataset,bwq_samplingPoint.samplePointNotation,bwq_samplingPoint.name,bwq_bathingWater.name,bwq_bathingWater.eubwidNotation,sampleDateTime.inXSDDateTime,sampleWeek.label,sampleClassification.complianceCodeNotation,sampleClassification.name,totalColiformQualifier.countQualifierNotation,totalColiformCount,faecalColiformQualifier.countQualifierNotation,faecalColiformCount,faecalStreptococciQualifier.countQualifierNotation,faecalStreptococciCount,entrovirusQualifier.countQualifierNotation,entrovirusCount,escherichiaColiCount,escherichiaColiQualifier.countQualifierNotation,intestinalEnterococciCount,intestinalEnterococciQualifier.countQualifierNotation,salmonellaPresent.name,salmonellaPresent.presenceNotation,abnormalWeatherException" .
	
t:inSeasonAssessmentValuesCsvViewer
    a               api:Viewer;
    api:name        "assessment-csv";
    api:properties  "bwq_samplingPoint.samplePointNotation,bwq_bathingWater.name,bwq_bathingWater.eubwidNotation,sampleDateTime.inXSDDateTime,sampleWeek.label,sampleClassification.complianceCodeNotation,totalColiformQualifier.countQualifierNotation,totalColiformCount,faecalColiformQualifier.countQualifierNotation,faecalColiformCount,faecalStreptococciQualifier.countQualifierNotation,faecalStreptococciCount,entrovirusQualifier.countQualifierNotation,entrovirusCount,escherichiaColiCount,escherichiaColiQualifier.countQualifierNotation,intestinalEnterococciCount,intestinalEnterococciQualifier.countQualifierNotation,salmonellaPresent.presenceNotation,abnormalWeatherException" .

t:inSeasonClassificationViewer
	a				api:Viewer;
	api:name		"classification";
	api:properties	"type,label,source,dataset,bwq_samplingPoint.samplePointNotation,bwq_samplingPoint.name,bwq_bathingWater.name,bwq_bathingWater.eubwidNotation,sampleDateTime.inXSDDateTime,sampleWeek.label,sampleClassification.complianceCodeNotation,sampleClassification.name,abnormalWeatherException" .
	
t:inSeasonColiformCountViewer
	a				api:Viewer;
	api:name		"coliforms";
	api:properties	"type,label,source,dataset,bwq_samplingPoint.samplePointNotation,bwq_samplingPoint.name,bwq_bathingWater.name,bwq_bathingWater.eubwidNotation,sampleDateTime.inXSDDateTime,sampleWeek.label,totalColiformQualifier.countQualifierNotation,totalColiformCount,faecalColiformQualifier.countQualifierNotation,faecalColiformCount,abnormalWeatherException" .

t:inSeasonStreptococciCountViewer
	a				api:Viewer;
	api:name		"streptococci";
	api:properties	"type,label,source,dataset,bwq_samplingPoint.samplePointNotation,bwq_samplingPoint.name,bwq_bathingWater.name,bwq_bathingWater.eubwidNotation,sampleDateTime.inXSDDateTime,sampleWeek.label,faecalStreptococciQualifier.countQualifierNotation,faecalStreptococciCount,abnormalWeatherException" .
	
t:inSeasonEntrovirusCountViewer
	a				api:Viewer;
	api:name		"entrovirus";
	api:properties	"type,label,source,dataset,bwq_samplingPoint.samplePointNotation,bwq_samplingPoint.name,bwq_bathingWater.name,bwq_bathingWater.eubwidNotation,sampleDateTime.inXSDDateTime,sampleWeek.label,entrovirusQualifier.countQualifierNotation,entrovirusCount,abnormalWeatherException" .

t:inSeasonIntestinalEnterococciViewer
    a               api:Viewer;
    api:name        "intestinalEnterococci";
    api:properties  "type,label,source,dataset,bwq_samplingPoint.samplePointNotation,bwq_samplingPoint.name,bwq_bathingWater.name,bwq_bathingWater.eubwidNotation,sampleDateTime.inXSDDateTime,sampleWeek.label,intestinalEnterococciQualifier.countQualifierNotation,intestinalEnterococciCount,abnormalWeatherException" .

t:inSeasonEscherichiaColiViewer
    a               api:Viewer;
    api:name        "escherichiaColi";
    api:properties  "type,label,source,dataset,bwq_samplingPoint.samplePointNotation,bwq_samplingPoint.name,bwq_bathingWater.name,bwq_bathingWater.eubwidNotation,sampleDateTime.inXSDDateTime,sampleWeek.label,escherichiaColiQualifier.countQualifierNotation,escherichiaColiCount,abnormalWeatherException" .

t:inSeasonSalmonellaPresentViewer
	a				api:Viewer;
	api:name		"salmonella";
	api:properties	"type,label,source,dataset,bwq_samplingPoint.samplePointNotation,bwq_samplingPoint.name,bwq_bathingWater.name,bwq_bathingWater.eubwidNotation,sampleDateTime.inXSDDateTime,sampleWeek.label,salmonellaPresent.name,salmonellaPresent.presenceNotation,abnormalWeatherException" .

##############################################################################################
## In-season slices
##############################################################################################
t:inSeasonSlices
  a api:ListEndpoint ;
  rdfs:comment "Lists all in-season data set slices."@en;
  api:uriTemplate           "/data/bathing-water-quality/in-season/slice" ;
  api:exampleRequestPath    "/data/bathing-water-quality/in-season/slice" ;
  api:viewer    
    api:basicViewer;
  api:selector [
    api:where "{?item a def-bwq:ByWeekSlice} UNION {?item a def-bwq:ByYearSlice} UNION {?item a def-bwq:BySamplingPointYearSlice} UNION {?item a def-bwq:BySamplingPointSlice} UNION {?item a def-bwq:LatestSampleSlice }"
#    api:filter "type=ByWeekSlice" ;
#    api:sort   "sampleWeek.ordinalWeekOfYearYear,sampleWeek.ordinalWeekOfYear";
  ] ;
  api:defaultViewer api:basicViewer .

#
# ByWeekSlice
#
t:inSeasonByWeekSlices
  rdfs:comment "Lists all in-season by-week data set slices, which collect assessments for bathing-water samples taken in the same week."@en;
  a api:ListEndpoint ;
  api:uriTemplate			"/data/bathing-water-quality/in-season/slice/week" ;
  api:exampleRequestPath	"/data/bathing-water-quality/in-season/slice/week" ;
  api:viewer	
  	t:sliceByWeekListViewer,api:basicViewer;
  api:selector [
    api:filter "type=ByWeekSlice" ;
#    api:sort   "sampleWeek.ordinalWeekOfYearYear,sampleWeek.ordinalWeekOfYear";
  ] ;
  api:defaultViewer t:sliceByWeekListViewer .
  
t:inSeasonByWeekSlice
  a api:ItemEndpoint ;
  rdfs:comment "Returns information about a particular in-season by-week dataset slice."@en;
  api:viewer	
  	t:sliceByWeekItemViewer,
  	api:describeViewer,
  	api:basicViewer;
  api:uriTemplate			"/data/bathing-water-quality/in-season/slice/week/{week}" ;
  api:itemTemplate 		    "http://environment.data.gov.uk/data/bathing-water-quality/in-season/slice/week/{week}" ;
  api:exampleRequestPath	"/data/bathing-water-quality/in-season/slice/week/1998-W24" ;
  api:defaultViewer 		t:sliceByWeekItemViewer .

t:sliceByWeekListViewer
	a			api:Viewer;
	api:name	"slice-by-week";
	api:properties	"name,label,sampleWeek.ordinalWeekOfYear,sampleWeek.ordinalWeekOfYearYear";
	.
	
t:sliceByWeekItemViewer
	a			api:Viewer;
	api:name	"slice-by-week";
	api:properties	"type,name,label,sliceStructure,sampleWeek.ordinalWeekOfYear,sampleWeek.ordinalWeekOfYearYear,observation.bwq_samplingPoint.name";
	.

#
# ByYearSlice
#
t:inSeasonByYearSlices
  a api:ListEndpoint ;
  rdfs:comment "Lists all in-season by-year data set slices, which collect the assessments for bathing-water samples taken in the same year."@en;
  api:viewer	
  	t:sliceByYearListViewer,api:basicViewer;
  api:uriTemplate			"/data/bathing-water-quality/in-season/slice/year" ;
  api:exampleRequestPath	"/data/bathing-water-quality/in-season/slice/year" ;
  api:selector [
    api:filter "type=ByYearSlice" ;
#    api:sort   "sampleYear.ordinalYear";
  ] ;
  api:defaultViewer t:sliceByYearListViewer .
  
t:inSeasonByYearSlice
  rdfs:comment "Returns information about a particular in-season by-year dataset slice."@en;
  a api:ItemEndpoint ;
  api:viewer	
  	t:sliceByYearItemViewer,
  	api:describeViewer,
  	api:basicViewer;
  api:uriTemplate			"/data/bathing-water-quality/in-season/slice/year/{year}" ;
  api:itemTemplate			"http://environment.data.gov.uk/data/bathing-water-quality/in-season/slice/year/{year}" ;
  api:exampleRequestPath	"/data/bathing-water-quality/in-season/slice/year/1998" ;
#  api:defaultViewer 		t:sliceByYearItemViewer;
  api:defaultViewer api:describeViewer; 
  .
    
t:sliceByYearListViewer
	a			api:Viewer;
	api:name	"slice-by-year";
	api:properties	"type,name,label,sampleYear.ordinalYear";
	.
	
t:sliceByYearItemViewer
	a			api:Viewer;
	api:name	"slice-by-year";
	api:properties	"type,name,label,sliceStructure,sampleYear.ordinalYear,observation.bwq_samplingPoint.name,observation.sampleWeek.label";
	.
#
# BySamplingPointYearSlice
#
t:inSeasonByPointYearSlices
  a api:ListEndpoint ;
  rdfs:comment "Lists all in-season by-point-and-year data set slices, which collect the assessments for bathing-water samples taken at the same sampling point in the same year."@en;
  api:viewer	
  	t:sliceByPointYearListViewer,api:basicViewer;
  api:uriTemplate			"/data/bathing-water-quality/in-season/slice/point-year" ;
  api:exampleRequestPath	"/data/bathing-water-quality/in-season/slice/point-year" ;
  api:selector [
    api:filter "type=BySamplingPointYearSlice" ;
#    api:sort   "sampleYear.ordinalYear,bwq_samplingPoint.samplePointNotation";
  ] ;
  api:defaultViewer t:sliceByPointYearListViewer .

t:inSeasonByPointYearSlicesByPoint
  rdfs:comment "Returns information about a particular in-season by-point-and-year dataset slice."@en;
  a api:ListEndpoint ;
  api:viewer    
    t:sliceByPointYearListViewer,
    api:describeViewer,
    api:basicViewer;
  api:uriTemplate           "/data/bathing-water-quality/in-season/slice/point/{point}/year" ;
  api:variable [ api:name "regex" ; api:value "^http://environment.data.gov.uk/data/bathing-water-quality/in-season/slice/point/{point}/year" ];
  api:selector [
    api:where   "?item a def-bwq:BySamplingPointYearSlice FILTER (regex(str(?item),?regex))"
  ];
  api:exampleRequestPath    "/data/bathing-water-quality/in-season/slice/point/03600/year" ;
  api:defaultViewer         t:sliceByPointYearListViewer; 
  .
  

t:inSeasonByPointYearSlice
  rdfs:comment "Returns information about a particular in-season by-point-and-year dataset slice."@en;
  a api:ItemEndpoint ;
  api:viewer	
  	t:sliceByPointYearItemViewer,
  	api:describeViewer,
    api:basicViewer;
  api:uriTemplate			"/data/bathing-water-quality/in-season/slice/point/{point}/year/{year}" ;
  api:itemTemplate			"http://environment.data.gov.uk/data/bathing-water-quality/in-season/slice/point/{point}/year/{year}" ;
  api:exampleRequestPath	"/data/bathing-water-quality/in-season/slice/point/03600/year/1998" ;
  api:defaultViewer 		t:sliceByPointYearItemViewer; 
  .
    
t:sliceByPointYearListViewer
	a			api:Viewer;
	api:name	"slice-by-point-and-year";
	api:properties	"name,type,label,sampleYear.ordinalYear,bwq_samplingPoint.name,bwq_samplingPoint.easting,bwq_samplingPoint.northing,bwq_samplingPoint.lat,bwq_samplingPoint.long";
	.

t:sliceByPointYearItemViewer
	a			api:Viewer;
	api:name	"slice-by-point-year";
	api:properties	"name,type,label,sliceStructure,sampleYear.ordinalYear,bwq_samplingPoint.name,bwq_samplingPoint.easting,bwq_samplingPoint.northing,bwq_samplingPoint.lat,bwq_samplingPoint.long,observation.sampleWeek.label";
	.
#
# BySamplingPointSlice
#
t:inSeasonByPointSlices
  a api:ListEndpoint ;
  rdfs:comment "Lists all in-season by-point data set slices, which collect the assessments for bathing-water samples taken at the same sampling point."@en;
  api:viewer	
  	t:sliceByPointListViewer,api:basicViewer;
  api:uriTemplate			"/data/bathing-water-quality/in-season/slice/point" ;
  api:exampleRequestPath	"/data/bathing-water-quality/in-season/slice/point" ;
  api:selector [
    api:filter "type=BySamplingPointSlice" ;
#    api:sort   "bwq_samplingPoint.samplePointNotation";
  ] ;
  api:defaultViewer t:sliceByPointListViewer .
  
t:inSeasonByPointSlice
  a api:ItemEndpoint ;
  rdfs:comment "Returns information about a particular in-season by-point dataset slice."@en;
  api:viewer	
  	t:sliceByPointItemViewer,
  	api:describeViewer,
  	api:basicViewer;
  api:uriTemplate			"/data/bathing-water-quality/in-season/slice/point/{point}" ;
  api:itemTemplate			"http://environment.data.gov.uk/data/bathing-water-quality/in-season/slice/point/{point}" ;
  api:exampleRequestPath	"/data/bathing-water-quality/in-season/slice/point/03600" ;
  api:defaultViewer 		t:sliceByPointItemViewer; 
  .
  
t:sliceByPointListViewer
	a			api:Viewer;
	api:name	"slice-by-point";
	api:properties	"name,type,label,bwq_samplingPoint.name,bwq_samplingPoint.easting,bwq_samplingPoint.northing,bwq_samplingPoint.lat,bwq_samplingPoint.long";
	.

t:sliceByPointItemViewer
	a			api:Viewer;
	api:name	"slice-by-point";
	api:properties	"name,type,label,sliceStructure,bwq_samplingPoint.name,bwq_samplingPoint.easting,bwq_samplingPoint.northing,bwq_samplingPoint.lat,bwq_samplingPoint.long,observation.sampleWeek.label";
	.
	
t:latestInSeasonSlice
	a	api:ItemEndpoint;
	api:viewer			api:describeViewer, api:basicViewer;
	api:uriTemplate		"/data/bathing-water-quality/in-season/slice/latest";
	api:itemTemplate	"http://environment.data.gov.uk/data/bathing-water-quality/in-season/slice/latest";
	api:defaultViewer	api:describeViewer;
	.
	

##############################################################################################
## Annual Compliance Samples
##############################################################################################
t:complianceAssessments
  a	api:ListEndpoint;
  rdfs:comment "List annual bathing-water-quality annual compliance assessments."@en;
  api:uriTemplate				"/doc/bathing-water-quality/compliance" ;
  api:exampleRequestPath		"/doc/bathing-water-quality/compliance" ;
  api:viewer
	t:complianceAssessmentViewer,
	t:complianceAssessmentCsvViewer,
	api:describeViewer,
	api:basicViewer; 
  api:defaultPageSize		"10";
  api:selector [
    api:filter "type=ComplianceAssessment";
    api:sort "sampleYear.ordinalYear,bwq_samplingPoint.samplePointNotation";
  ] ;
  api:defaultViewer	t:complianceAssessmentViewer;
  .

##############################################################################################
## Individual Annual Compliance Assessments
##############################################################################################
t:individualComplianceAssessment
  a	api:ItemEndpoint;
  rdfs:comment "Returns information about a particular annual compliance assessment given by bathing-water sampling point and year"@en;
  api:uriTemplate			    "/data/bathing-water-quality/compliance/point/{bwspid}/year/{year}" ;
  api:exampleRequestPath		"/data/bathing-water-quality/compliance/point/03600/year/2010" ;
  api:itemTemplate 				"http://environment.data.gov.uk/data/bathing-water-quality/compliance/point/{bwspid}/year/{year}" ;
  api:viewer
	t:complianceAssessmentViewer,
	t:complianceAssessmentCsvViewer,
	api:describeViewer, 
	api:basicViewer; 
#  api:defaultViewer	api:describeViewer;
  api:defaultViewer	t:complianceAssessmentViewer;
  .
##############################################################################################
## Annual Compliance Assessment by Sampling Point
##############################################################################################
t:complianceAssessmentsBySamplePoint
  a	api:ListEndpoint;
  rdfs:comment "Lists annual bathing-water quality compliance assessments for a given bathing-water sampling point."@en;
  api:uriTemplate				"/doc/bathing-water-quality/compliance/point/{bwspid}" ;
  api:exampleRequestPath		"/doc/bathing-water-quality/compliance/point/03600" ;
  api:viewer
	t:complianceAssessmentViewer,
	t:complianceAssessmentCsvViewer,
	api:describeViewer,
	api:basicViewer; 
  api:variable  [ api:name  "sp";
                  api:type  rdfs:Resource;
                  api:value "http://location.data.gov.uk/so/ef/SamplingPoint/bwsp.eaew/{bwspid}";
                ];	
  api:defaultPageSize		"10";
  api:selector [
    api:where "?item a def-bwq:ComplianceAssessment; def-bwq:samplingPoint ?sp .";
    api:sort "sampleYear.ordinalYear";
  ] ;
  api:defaultViewer	t:complianceAssessmentViewer;
  .
##############################################################################################
## Annual Compliance Assessment by Bathing Water
##############################################################################################
t:complianceAssessmentsByBathingWater
  rdfs:comment "Lists annual bathing-water quality compliance assessments for a given bathing-water sampling point."@en;
  a	api:ListEndpoint;
  api:uriTemplate				"/doc/bathing-water-quality/compliance/bathing-water/{eubwid}" ;
  api:exampleRequestPath		"/doc/bathing-water-quality/compliance/bathing-water/ukc2102-03600" ;
  api:viewer
	t:complianceAssessmentViewer,
	t:complianceAssessmentCsvViewer,
	api:describeViewer, 
	api:basicViewer; 
  api:defaultPageSize		"10";
  api:variable  [ api:name  "bw";
                  api:type  rdfs:Resource;
                  api:value "http://environment.data.gov.uk/id/bathing-water/{eubwid}";
               ];
  api:selector [
    api:where  "?item a                def-bwq:ComplianceAssessment; def-bwq:bathingWater ?bw .";
    api:sort "sampleYear.ordinalYear";
  ] ;
#  api:defaultViewer	api:describeViewer;
  api:defaultViewer	t:complianceAssessmentViewer;
  .

##############################################################################################
## Lastest Annual Compliance Assessments
##############################################################################################
t:latestComplianceAssessments
  a	api:ListEndpoint;
  rdfs:comment "Lists the most recent annual bathing-water quality compliance assessment for each designated bathing water in England and Wales"@en;
  api:uriTemplate				"/doc/bathing-water-quality/compliance/latest" ;
  api:exampleRequestPath		"/doc/bathing-water-quality/compliance/latest" ;
  api:maxPageSize				"1000";
  api:defaultPageSize			"10";
  api:viewer
	t:complianceAssessmentViewer,
	t:complianceAssessmentCsvViewer,
	api:describeViewer, 
	api:basicViewer; 
  api:selector [
#    api:filter "exists-bwq_bathingWater.yearDedesignated=false";     
    api:where	
"""
{ ?slice a def-bwq:ComplianceByYearSlice;
         def-bwq:sampleYear [interval:ordinalYear ?year] .

  # Find the most recent annual compliance slice
  OPTIONAL {
    ?slice2 a def-bwq:ComplianceByYearSlice;
            def-bwq:sampleYear [ interval:ordinalYear ?year2 ] .
    FILTER (?year2>?year)          
  } FILTER (!bound(?slice2))
}
?slice qb:observation ?item .
""";
#    api:sort	"sampleYear.ordinalYear,bwq_bathingWater.name";
	api:sort	"bwq_samplingPoint.samplePointNotation";
  ] ;
  api:defaultViewer	t:complianceAssessmentViewer;
  .
 
t:nearestLatestComplianceAssessments
  a	api:ListEndpoint;
  rdfs:comment "Lists the most recent annual bathing-water quality compliance assessment for each designated bathing water in England and Wales, ordered by linear distance from a point-of-interest designated by OSGB easting and northing coordinates."@en;
  api:uriTemplate			    "/doc/bathing-water-quality/compliance/latest-nearest/easting/{easting}/northing/{northing}" ;
  api:exampleRequestPath		"/doc/bathing-water-quality/compliance/latest-nearest/easting/591200/northing/115406";
  api:defaultPageSize			"5";
#  api:maxPageSize				"20";
  api:viewer
	t:complianceAssessmentViewer,
	t:complianceAssessmentCsvViewer,
	api:describeViewer,
	api:basicViewer; 
  api:selector [
#    api:filter "exists-bwq_bathingWater.yearDedesignated=false";     
    api:where	
"""
{ ?slice a def-bwq:ComplianceByYearSlice;
         def-bwq:sampleYear [interval:ordinalYear ?year] .

# Find the most recent annual compliance slice
  OPTIONAL {
    ?slice2 a def-bwq:ComplianceByYearSlice;
          def-bwq:sampleYear [ interval:ordinalYear ?year2 ] .
    FILTER (?year2>?year)          
  } FILTER (!bound(?slice2))
}
?slice qb:observation ?item .
?item def-bwq:samplingPoint 
      [ spatialrelations:easting ?e; 
        spatialrelations:northing ?n ] 
BIND ( ((?e-?easting^^xsd:decimal)*
        (?e-?easting^^xsd:decimal)+
        (?n-?northing^^xsd:decimal)*
        (?n-?northing^^xsd:decimal)) as ?dsquared) 
""";
    api:orderBy "?dsquared";       
  ] ;
  api:defaultViewer	t:complianceAssessmentViewer;
  .
##############################################################################################
# Latest Annual Compliance Assessment by sampling point.
##############################################################################################
t:latestComplianceAssessmentBySamplePoint
  a	api:ListEndpoint;
  rdfs:comment "Lists the most recent annual bathing-water quality compliance assessment for a given bathing-water sampling point."@en;
  api:uriTemplate			"/doc/bathing-water-quality/compliance/point/{bwspid}/latest" ;
  api:exampleRequestPath	"/doc/bathing-water-quality/compliance/point/19100/latest" ;
  api:viewer
	t:complianceAssessmentViewer,
	t:complianceAssessmentCsvViewer,
	api:describeViewer,
	api:basicViewer; 
  api:variable  [ api:name  "sp";
                  api:type  rdfs:Resource;
                  api:value "http://location.data.gov.uk/so/ef/SamplingPoint/bwsp.eaew/{bwspid}";
                ];   
  api:selector [
     api:where  
"""
{ ?slice a def-bwq:ComplianceByYearSlice;
         def-bwq:sampleYear [interval:ordinalYear ?year] .

  # Find the most recent annual compliance slice
  OPTIONAL {
    ?slice2 a def-bwq:ComplianceByYearSlice;
            def-bwq:sampleYear [ interval:ordinalYear ?year2 ] .
    FILTER (?year2>?year)          
  } FILTER (!bound(?slice2))
}
?slice qb:observation ?item .
?item a def-bwq:ComplianceAssessment; def-bwq:samplingPoint ?sp .
""";
  ];
  api:defaultViewer	t:complianceAssessmentViewer;
  .

t:complianceAssessmentViewer
	a				api:Viewer;
	api:name		"compliance";
	api:properties	"type,label,source,bwq_samplingPoint.name,bwq_samplingPoint.samplePointNotation,bwq_samplingPoint.easting,bwq_samplingPoint.northing,bwq_samplingPoint.lat,bwq_samplingPoint.long,bwq_bathingWater.name,bwq_bathingWater.eubwidNotation,sampleYear.ordinalYear,complianceClassification.complianceCodeNotation,complianceClassification.name" .

t:complianceAssessmentCsvViewer
    a               api:Viewer;
    api:name        "compliance-csv";
    api:properties  "label,source,bwq_samplingPoint.name,bwq_samplingPoint.samplePointNotation,bwq_samplingPoint.easting,bwq_samplingPoint.northing,bwq_samplingPoint.lat,bwq_samplingPoint.long,bwq_bathingWater.name,bwq_bathingWater.eubwidNotation,sampleYear.ordinalYear,complianceClassification.complianceCodeNotation,complianceClassification.name" .

##############################################################################################
# Latest compliance assessment by bathing water.
##############################################################################################
t:latestComplianceAssessmentByBathingWater
  a	api:ListEndpoint;
  rdfs:comment "Lists the most recent annual bathing-water quality compliance assessment for a given bathing-water."@en;
  api:uriTemplate				"/doc/bathing-water-quality/compliance/bathing-water/{eubwid}/latest" ;
  api:exampleRequestPath		"/doc/bathing-water-quality/compliance/bathing-water/ukc2102-03600/latest" ;
  api:variable  [ api:name  "bw";
                  api:type  rdfs:Resource;
                  api:value "http://environment.data.gov.uk/id/bathing-water/{eubwid}";
               ]; 
  api:viewer
	t:complianceAssessmentViewer,
	t:complianceAssessmentCsvViewer,
	api:describeViewer,
	api:basicViewer; 
  api:selector [
        api:where """
{ ?slice a def-bwq:ComplianceByYearSlice;
         def-bwq:sampleYear [interval:ordinalYear ?year] .

  # Find the most recent annual compliance slice
  OPTIONAL {
    ?slice2 a def-bwq:ComplianceByYearSlice;
            def-bwq:sampleYear [ interval:ordinalYear ?year2 ] .
    FILTER (?year2>?year)          
  } FILTER (!bound(?slice2))
}
?slice qb:observation ?item .
?item a def-bwq:ComplianceAssessment; def-bwq:bathingWater ?bw ."""
  ];
  api:defaultViewer	t:complianceAssessmentViewer;
  .  

##############################################################################################
# Compliance assessment slices
##############################################################################################
t:complianceSlices
  a api:ListEndpoint ;
  rdfs:comment "Lists all available annual compliance assessment dataset slices."@en;
  api:uriTemplate           "/data/bathing-water-quality/compliance/slice" ;
  api:exampleRequestPath    "/data/bathing-water-quality/compliance/slice" ;
  api:viewer    
    api:basicViewer;
  api:selector [
    api:where "{?item a def-bwq:ComplianceByYearSlice} UNION {?item a def-bwq:ComplianceBySamplingPointSlice}"
  ] ;
  api:defaultViewer api:basicViewer .


#
# ByYearSlice
#
t:complianceByYearSlices
  a api:ListEndpoint ;
  rdfs:comment "Lists available by-year annual compliance assessment dataset slices, which collects annual compliance assessments pertaining to the same year."@en;
  api:viewer	
  	t:complianceByYearListViewer, 
  	api:basicViewer;
  api:uriTemplate			"/data/bathing-water-quality/compliance/slice/year" ;
  api:exampleRequestPath	"/data/bathing-water-quality/compliance/slice/year" ;
  api:selector [
    api:filter "type=ComplianceByYearSlice" ;
    api:sort   "sampleYear.ordinalYear";
  ] ;
  api:defaultViewer t:complianceByYearListViewer .
  
t:complianceByYearSlice
  a api:ItemEndpoint ;
  rdfs:comment "Returns information about a particular by-year annual compliance assessment dataset slice."@en;
  api:viewer	
  	t:complianceByYearItemViewer,
  	api:describeViewer, 
  	api:basicViewer;
  api:uriTemplate			"/data/bathing-water-quality/compliance/slice/year/{year}" ;
  api:itemTemplate			"http://environment.data.gov.uk/data/bathing-water-quality/compliance/slice/year/{year}" ;
  api:exampleRequestPath	"/data/bathing-water-quality/compliance/slice/year/1998" ;
  api:defaultViewer t:complianceByYearItemViewer; 
  .
  
t:complianceByYearListViewer
	a				api:Viewer;
	api:name		"slice-by-year";
	api:properties	"name,type,label,sampleYear.ordinalYear";
	.
	
t:complianceByYearItemViewer
	a				api:Viewer;
	api:name		"slice-by-year";
	api:properties	"name,type,label,sliceStructure,sampleYear.ordinalYear,observation.bwq_bathingWater.name,observation.complianceClassification.name";
	.

#
# BySamplingPointSlice
#
t:complianceByPointSlices
  a api:ListEndpoint ;
  rdfs:comment "Lists available by-point annual compliance assessment dataset slices, which collects annual compliance assessments pertaining to the same sampling point."@en;
  api:viewer	
  	t:complianceByPointListViewer,
  	api:basicViewer;
  api:uriTemplate			"/data/bathing-water-quality/compliance/slice/point" ;
  api:exampleRequestPath	"/data/bathing-water-quality/compliance/slice/point" ;
  api:selector [
    api:filter "type=ComplianceBySamplingPointSlice" ;
    api:sort   "bwq_samplingPoint.samplePointNotation";
  ] ;
  api:defaultViewer t:complianceByPointListViewer .
  
t:complianceByPointSlice
  a api:ItemEndpoint ;
  rdfs:comment "Returns information about a particular by-point annual compliance assessment dataset slice."@en;
  api:viewer	
  	t:complianceByPointItemViewer,
  	api:describeViewer, 
  	api:basicViewer;
  api:uriTemplate			"/data/bathing-water-quality/compliance/slice/point/{point}" ;
  api:itemTemplate			"http://environment.data.gov.uk/data/bathing-water-quality/compliance/slice/point/{point}" ;
  api:exampleRequestPath	"/data/bathing-water-quality/compliance/slice/point/03600" ;
  api:defaultViewer t:complianceByPointItemViewer; 
  .
  
t:complianceByPointListViewer
	a				api:Viewer;
	api:name		"slice-by-point";
	api:properties	"name,type,label,bwq_bathingWater.name";
	.
	
t:complianceByPointItemViewer
	a				api:Viewer;
	api:name		"slice-by-point";
	api:properties	"name,type,label,sliceStructure,bwq_bathingWater.name,observation.sampleYear.ordinalYear,observation.complianceClassification.name";
	.
	
###############################################################################
# SuspensionOfMonitoring
###############################################################################
t:suspensions
    a               api:ListEndpoint;
    rdfs:comment    "Returns a list of most recent Suspension Of Monitoring records for any given suspension"@en;
    api:uriTemplate "/doc/bathing-water-quality/suspension";
    api:selector    [
        api:where   """                           
  ?item     a                           def-som:SuspensionOfMonitoring;
            def-ef:samplingPoint        ?spt;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime .

   OPTIONAL {       
     ?item2 a                           def-som:SuspensionOfMonitoring;
            def-ef:samplingPoint        ?spt;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime2 .
     FILTER (?item != ?item2 && ?recordDateTime2>?recordDateTime)
  }
  FILTER(!bound(?item2))
""";
        api:sort    "som_notation,-recordDateTime" ;
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .

t:suspensionsByPoint
    a               api:ListEndpoint;
    # really want this to be in a /doc position with a redirect from /data
    api:uriTemplate "/doc/bathing-water-quality/suspension/point/{bwspid}";
    # Hook a 303 redirect 'back' to this end point.
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/point/{bwspid}";
    rdfs:comment    "Returns a list of Suspension Of Monitoring record for a given bathing water showing only the most recent record for any given suspension."@en;
    api:selector    [
        api:where   """                           
  ?item     a                           def-som:SuspensionOfMonitoring;
            def-ef:samplingPoint        ?sp;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime .

   OPTIONAL {       
     ?item2 a                           def-som:SuspensionOfMonitoring;
            def-ef:samplingPoint        ?sp;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime2 .
     FILTER (?item != ?item2 && ?recordDateTime2>?recordDateTime)
  }
  FILTER(!bound(?item2))
""";
        api:sort    "som_notation,-recordDateTime" ;
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .

t:suspensionsByPointLatest
    a               api:ListEndpoint;
    rdfs:comment    "Returns a list of the one most recent Suspension Of Monitoring record for a given bathing water"@en;
    api:uriTemplate "/doc/bathing-water-quality/suspension/point/{bwspid}/latest";
    # Hook a 303 redirect 'back' to this end point.
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/point/{bwspid}/latest";
    api:selector    [
        api:where   """                           
  ?item     a                           def-som:SuspensionOfMonitoring;
            def-ef:samplingPoint        ?sp;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime .

   OPTIONAL {       
     ?item2 a                           def-som:SuspensionOfMonitoring;
            def-ef:samplingPoint        ?sp;
            def-som:startOfSuspension   ?startOfSuspension2;
            def-som:recordDateTime      ?recordDateTime2 .
     FILTER ( ?item != ?item2 &&
              ( ?startOfSuspension2 > ?startOfSuspension ||
                ( ?startOfSuspension2 = ?startOfSuspension && ?recordDateTime2>?recordDateTime) ) )
  }
  FILTER(!bound(?item2))
""";
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .

    
t:suspensionsByBwLatest
    a               api:ListEndpoint;
    rdfs:comment    "Returns a list of the one most recent Suspension Of Monitoring record for a given bathing water"@en;
    api:uriTemplate "/doc/bathing-water-quality/suspension/bathing-water/{eubwid}/latest";
    # Hook a 303 redirect 'back' to this end point.
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/bathing=water/{eubwid}/latest";
    api:selector    [
        api:where   """                           
  ?item     a                           def-som:SuspensionOfMonitoring;
            def-bw:bathingWater         ?bw;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime .

   OPTIONAL {       
     ?item2 a                           def-som:SuspensionOfMonitoring;
            def-bw:bathingWater         ?bw;
            def-som:startOfSuspension   ?startOfSuspension2;
            def-som:recordDateTime      ?recordDateTime2 .
     FILTER ( ?item != ?item2 &&
              ( ?startOfSuspension2 > ?startOfSuspension ||
                ( ?startOfSuspension2 = ?startOfSuspension && ?recordDateTime2>?recordDateTime) ) )
  }
  FILTER(!bound(?item2))
""";
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .

t:suspensionsByPointStartDate
    a               api:ListEndpoint;
    # really want this to be in a /doc position with a redirect from /data
    api:uriTemplate "/doc/bathing-water-quality/suspension/point/{bwspid}/date/{date}";
    # Hook a 303 redirect 'back' to this end point.
    rdfs:comment    "Returns a list of all (including updated records) Suspension of Monitoring Records for a given bathing water starting on a given date."@en;
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/point/{bwspid}/date/{date}";
    api:selector    [
        api:filter      "type=SuspensionOfMonitoring",
                        "samplingPoint={sp}";
# Filter in matching year, month and day with date from startOfSuspension.
    api:where       """
  BIND(xsd:date(CONCAT(SUBSTR(?date,1,4),"-",
                       SUBSTR(?date,5,2),"-",
                       SUBSTR(?date,7,2) )) as ?startDate)
  ?item       def-som:startOfSuspension   ?startDateTime .
  FILTER (xsd:date(?startDateTime) = ?startDate)
""";
        api:sort        "som_notation,-recordDateTime";
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .
    
t:suspensionsByPointStartDateTime
    a               api:ListEndpoint;
    # really want this to be in a /doc position with a redirect from /data
    api:uriTemplate "/doc/bathing-water-quality/suspension/point/{bwspid}/date/{date}/time/{time}";
    # Hook a 303 redirect 'back' to this end point.
    rdfs:comment    "Returns a list of all (including updated records) Suspension of Monitoring Records for a given bathing water starting on a given date and time."@en;
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/point/{bwspid}/date/{date}/time/{time}";
    api:selector    [
        api:filter      "type=SuspensionOfMonitoring",
                        "samplingPoint={sp}";
# Filter in matching year, month, day, hours, minutes and seconds with date from startOfSuspension.
    api:where   """
  BIND(xsd:dateTime(CONCAT(SUBSTR(?date,1,4),"-",
                           SUBSTR(?date,5,2),"-",
                           SUBSTR(?date,7,2),"T",
                           SUBSTR(?time,1,2),":",
                           SUBSTR(?time,3,2),":",
                           SUBSTR(?time,5,2) )) as ?startDateTime)
  ?item def-som:startOfSuspension ?startDateTime .
""";
        api:sort        "som_notation,-recordDateTime";
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .
    
t:suspension
    a                   api:ItemEndpoint;
    api:uriTemplate     "/data/bathing-water-quality/suspension/point/{bwspid}/date/{date}/time/{time}/recordDateTime/{recordDateTime}";
    # Hook a 303 redirect 'back' to this end point.
    api:itemTemplate    "http://environment.data.gov.uk/data/bathing-water-quality/suspension/point/{bwspid}/date/{date}/time/{time}/recordDateTime/{recordDateTime}";
    rdfs:comment        "Returns a individual Suspension of Monitoring record"@en;
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .

t:suspensionsByPointStartDateTimeLatest
    a               api:ListEndpoint;
    # really want this to be in a /doc position with a redirect from /data
    api:uriTemplate "/doc/bathing-water-quality/suspension/point/{bwspid}/date/{date}/time/{time}/latest";
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/point/{bwspid}/date/{date}/time/{time}/latest";
    rdfs:comment    "Returns just the most recent Suspension of Monitoring record for a given bathing-water starting at a given date and time."@en;
    api:selector    [
# Filter in matching year, month, day, hours, minutes and seconds with date from startOfSuspension.
    api:where   """
  # Fix the start of suspension date/time
  BIND(xsd:dateTime(CONCAT(SUBSTR(?date,1,4),"-",
                           SUBSTR(?date,5,2),"-",
                           SUBSTR(?date,7,2),"T",
                           SUBSTR(?time,1,2),":",
                           SUBSTR(?time,3,2),":",
                           SUBSTR(?time,5,2) )) as ?startDateTime)
                           
  ?item     a                           def-som:SuspensionOfMonitoring;
            def-ef:samplingPoint        ?sp;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime .

   OPTIONAL {       
     ?item2 a                           def-som:SuspensionOfMonitoring;
            def-ef:samplingPoint        ?sp;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime2 .
     FILTER (?item != ?item2 && ?recordDateTime2>?recordDateTime)
  }
  FILTER(!bound(?item2))
""";
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .

t:suspensionsActiveOnDate
    a                api:ListEndpoint;
    # really want this to be in a /doc position with a redirect from /data
    api:uriTemplate  "/doc/bathing-water-quality/suspension/active-on/{date}";
    # Hook a 303 redirect 'back' to this end point.
    rdfs:comment    "Returns a list of the most recent Suspension Of Monitoring record for suspensions that are/were active on a given date."@en;
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/active-on/{date}";
    api:selector    [
    api:where   """
  BIND(xsd:date(CONCAT(SUBSTR(?date,1,4),"-",
                       SUBSTR(?date,5,2),"-",
                       SUBSTR(?date,7,2) )) as ?dateOfInterest)
  ?item   a   def-som:SuspensionOfMonitoring;
            def-ef:samplingPoint            ?spt;
            def-som:startOfSuspension       ?startOfSuspension;
            def-som:recordDateTime          ?recordDateTime;
            .
   OPTIONAL {       
     ?item2 a                           def-som:SuspensionOfMonitoring;
            def-ef:samplingPoint        ?spt;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime2 .
     FILTER (?item != ?item2 && ?recordDateTime2>?recordDateTime)
  }
  FILTER(!bound(?item2))
  OPTIONAL {
    ?item   def-som:endOfSuspension ?endOfSuspension .   
  } 
  FILTER ( xsd:date(?startOfSuspension)<=?dateOfInterest && 
          (!bound(?endOfSuspension) || ?dateOfInterest<=xsd:date(?endOfSuspension)) )
  OPTIONAL {
    ?item   def-som:expectedEndOfSuspension ?expectedEndOfSuspension .
  } 
""";
  api:orderBy  "DESC(?endOfSuspension) DESC(?expectedEndOfSuspension)" ;
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .

t:suspensionsCompletedByDate
    a                api:ListEndpoint;
    # really want this to be in a /doc position with a redirect from /data
    api:uriTemplate  "/doc/bathing-water-quality/suspension/completed-by/{date}";
    # Hook a 303 redirect 'back' to this end point.
    rdfs:comment    "Returns a list of most recent Suspension Of Monitoring records for suspensions that completed on or before a given date"@en;
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/completed-by/{date}";
    api:selector    [
    api:where   """
  BIND(xsd:date(CONCAT(SUBSTR(?date,1,4),"-",
                       SUBSTR(?date,5,2),"-",
                       SUBSTR(?date,7,2) )) as ?dateOfInterest)
 
  ?item       a   def-som:SuspensionOfMonitoring;
              def-ef:samplingPoint            ?spt;
              def-som:startOfSuspension       ?startOfSuspension;
              def-som:recordDateTime          ?recordDateTime;
              .
   OPTIONAL {       
     ?item2 a                           def-som:SuspensionOfMonitoring;
            def-ef:samplingPoint        ?spt;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime2 .
     FILTER (?item != ?item2 && ?recordDateTime2>?recordDateTime)
  }
  FILTER(!bound(?item2))
  ?item   def-som:endOfSuspension ?endOfSuspension .   
  FILTER(xsd:date(?endOfSuspension) <= ?dateOfInterest)
""";
    api:orderBy "DESC(?endOfSuspension)";
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .

t:suspensionsByPointActiveOnDate
    a               api:ListEndpoint;
    # really want this to be in a /doc position with a redirect from /data
    api:uriTemplate "/doc/bathing-water-quality/suspension/point/{bwspid}/active-on/{date}";
    # Hook a 303 redirect 'back' to this end point.
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/point/{bwspid}/active-on/{date}";
    rdfs:comment    "Returns a list of the most recent Suspension Of Monitoring record for suspensions at a given bathing water that are/were active on a given date."@en;
    api:selector    [
    api:where   """
  BIND(xsd:date(CONCAT(SUBSTR(?date,1,4),"-",
                       SUBSTR(?date,5,2),"-",
                       SUBSTR(?date,7,2) )) as ?dateOfInterest)
  ?item   a   def-som:SuspensionOfMonitoring;
            def-ef:samplingPoint            ?sp;
            def-som:startOfSuspension       ?startOfSuspension;
            def-som:recordDateTime          ?recordDateTime;
            .
   OPTIONAL {       
     ?item2 a                           def-som:SuspensionOfMonitoring;
            def-ef:samplingPoint        ?sp;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime2 .
     FILTER (?item != ?item2 && ?recordDateTime2>?recordDateTime)
  }
  FILTER(!bound(?item2))
  OPTIONAL {
    ?item   def-som:endOfSuspension ?endOfSuspension .   
  } 
  FILTER ( xsd:date(?startOfSuspension)<=?dateOfInterest && 
          (!bound(?endOfSuspension) || ?dateOfInterest<=xsd:date(?endOfSuspension)) )
  OPTIONAL {
    ?item   def-som:expectedEndOfSuspension ?expectedEndOfSuspension .
  } 
""";
  api:orderBy  "DESC(?endOfSuspension) DESC(?expectedEndOfSuspension)";
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .

t:suspensionsByPointCompletedByDate
    a               api:ListEndpoint;
    # really want this to be in a /doc position with a redirect from /data
    api:uriTemplate  "/doc/bathing-water-quality/suspension/point/{bwspid}/completed-by/{date}";
    # Hook a 303 redirect 'back' to this end point.
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/point/{bwspid}/completed-by/{date}";
    rdfs:comment    "Returns a list of most recent Suspension Of Monitoring records for suspensions at a given bathing water that completed on or before a given date"@en;
    api:selector    [
    api:where   """
  BIND(xsd:date(CONCAT(SUBSTR(?date,1,4),"-",
                       SUBSTR(?date,5,2),"-",
                       SUBSTR(?date,7,2) )) as ?dateOfInterest)
 
  ?item       a   def-som:SuspensionOfMonitoring;
              def-ef:samplingPoint            ?sp;
              def-som:startOfSuspension       ?startOfSuspension;
              def-som:recordDateTime          ?recordDateTime;
              .
   OPTIONAL {       
     ?item2 a                           def-som:SuspensionOfMonitoring;
            def-ef:samplingPoint        ?sp;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime2 .
     FILTER (?item != ?item2 && ?recordDateTime2>?recordDateTime)
  }
  FILTER(!bound(?item2))
  ?item   def-som:endOfSuspension ?endOfSuspension .   
  FILTER(xsd:date(?endOfSuspension) < ?dateOfInterest)
""";
    api:orderBy "DESC(?endOfSuspension)";
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .

###########################################################################################################
# By BathingWater variants
###########################################################################################################

t:suspensionsByBw
    a               api:ListEndpoint;
    # really want this to be in a /doc position with a redirect from /data
    api:uriTemplate "/doc/bathing-water-quality/suspension/bathing-water/{eubwid}";
    # Hook a 303 redirect 'back' to this end point.
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/bathing-water/{eubwid}";
    rdfs:comment    "Returns a list of Suspension Of Monitoring record for a given bathing water showing only the most recent record for any given suspension."@en;
    api:selector    [
        api:where   """                           
  ?item     a                           def-som:SuspensionOfMonitoring;
            def-bw:bathingWater         ?bw;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime .

   OPTIONAL {       
     ?item2 a                           def-som:SuspensionOfMonitoring;
            def-bw:bathingWater             ?bw;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime2 .
     FILTER (?item != ?item2 && ?recordDateTime2>?recordDateTime)
  }
  FILTER(!bound(?item2))
""";
        api:sort        "som_notation";
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .
    
t:suspensionsByBwStartDate
    a               api:ListEndpoint;
    # really want this to be in a /doc position with a redirect from /data
    api:uriTemplate "/doc/bathing-water-quality/suspension/bathing-water/{eubwid}/date/{date}";
    # Hook a 303 redirect 'back' to this end point.
    rdfs:comment    "Returns a list of all (including updated records) Suspension of Monitoring Records for a given bathing water starting on a given date."@en;
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/bathing-water/{eubwid}/date/{date}";
    api:selector    [
        api:filter      "type=SuspensionOfMonitoring",
                        "bathing-water={bw}";
# Filter in matching year, month and day with date from startOfSuspension.
    api:where       """
  BIND(xsd:date(CONCAT(SUBSTR(?date,1,4),"-",
                       SUBSTR(?date,5,2),"-",
                       SUBSTR(?date,7,2) )) as ?startDate)
  ?item       def-som:startOfSuspension   ?startDateTime .
  FILTER (xsd:date(?startDateTime) = ?startDate)
""";
        api:sort        "som_notation";
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .
    
t:suspensionsByBwStartDateTime
    a               api:ListEndpoint;
    # really want this to be in a /doc position with a redirect from /data
    api:uriTemplate "/doc/bathing-water-quality/suspension/bathing-water/{eubwid}/date/{date}/time/{time}";
    # Hook a 303 redirect 'back' to this end point.
    rdfs:comment    "Returns a list of all (including updated records) Suspension of Monitoring Records for a given bathing water starting on a given date and time."@en;
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/bathing-water/{eubwid}/date/{date}/time/{time}";
    api:selector    [
        api:filter      "type=SuspensionOfMonitoring",
                        "bathingWater={bw}";
# Filter in matching year, month, day, hours, minutes and seconds with date from startOfSuspension.
    api:where   """
  BIND(xsd:dateTime(CONCAT(SUBSTR(?date,1,4),"-",
                           SUBSTR(?date,5,2),"-",
                           SUBSTR(?date,7,2),"T",
                           SUBSTR(?time,1,2),":",
                           SUBSTR(?time,3,2),":",
                           SUBSTR(?time,5,2) )) as ?startDateTime)
  ?item def-som:startOfSuspension ?startDateTime .
""";
        api:sort        "som_notation";
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .
    
t:suspensionsByBwStartDateTimeLatest
    a               api:ListEndpoint;
    # really want this to be in a /doc position with a redirect from /data
    api:uriTemplate "/doc/bathing-water-quality/suspension/bathing-water/{eubwid}/date/{date}/time/{time}/latest";
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/bathing-water/{eubwid}/date/{date}/time/{time}/latest";
    rdfs:comment    "Returns just the most recent Suspension of Monitoring record for a given bathing-water starting at a given date and time."@en;
    api:selector    [
# Filter in matching year, month, day, hours, minutes and seconds with date from startOfSuspension.
    api:where   """
  # Fix the start of suspension date/time
  BIND(xsd:dateTime(CONCAT(SUBSTR(?date,1,4),"-",
                           SUBSTR(?date,5,2),"-",
                           SUBSTR(?date,7,2),"T",
                           SUBSTR(?time,1,2),":",
                           SUBSTR(?time,3,2),":",
                           SUBSTR(?time,5,2) )) as ?startDateTime)
                           
  ?item     a                           def-som:SuspensionOfMonitoring;
            def-bw:bathingWater         ?bw;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime .

   OPTIONAL {       
     ?item2 a                           def-som:SuspensionOfMonitoring;
            def-bw:bathingWater         ?bw;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime2 .
     FILTER (?item != ?item2 && ?recordDateTime2>?recordDateTime)
  }
  FILTER(!bound(?item2))
""";
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .

t:suspensionsByBwActiveOnDate
    a               api:ListEndpoint;
    # really want this to be in a /doc position with a redirect from /data
    api:uriTemplate "/doc/bathing-water-quality/suspension/bathing-water/{eubwid}/active-on/{date}";
    # Hook a 303 redirect 'back' to this end point.
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/bathing-water/{eubwid}/active-on/{date}";
    rdfs:comment    "Returns a list of the most recent Suspension Of Monitoring record for suspensions at a given bathing water that are/were active on a given date."@en;
    api:selector    [
    api:where   """
  BIND(xsd:date(CONCAT(SUBSTR(?date,1,4),"-",
                       SUBSTR(?date,5,2),"-",
                       SUBSTR(?date,7,2) )) as ?dateOfInterest)
  ?item     a   def-som:SuspensionOfMonitoring;
            def-bw:bathingWater             ?bw;
            def-som:startOfSuspension       ?startOfSuspension;
            def-som:recordDateTime          ?recordDateTime;
            .
   OPTIONAL {       
     ?item2 a                           def-som:SuspensionOfMonitoring;
            def-ef:samplingPoint        ?sp;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime2 .
     FILTER (?item != ?item2 && ?recordDateTime2>?recordDateTime)
  }
  FILTER(!bound(?item2))
  OPTIONAL {
    ?item   def-som:endOfSuspension ?endOfSuspension .   
  } 
  FILTER ( xsd:date(?startOfSuspension)<=?dateOfInterest && 
          (!bound(?endOfSuspension) || ?dateOfInterest<=xsd:date(?endOfSuspension)) )
  OPTIONAL {
    ?item   def-som:expectedEndOfSuspension ?expectedEndOfSuspension .
  } 
""";
  api:orderBy  "DESC(?endOfSuspension) DESC(?expectedEndOfSuspension)";
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .

t:suspensionsByBwCompletedByDate
    a               api:ListEndpoint;
    # really want this to be in a /doc position with a redirect from /data
    api:uriTemplate  "/doc/bathing-water-quality/suspension/bathing-water/{eubwid}/completed-by/{date}";
    # Hook a 303 redirect 'back' to this end point.
    api:itemTemplate "http://environment.data.gov.uk/data/bathing-water-quality/suspension/bathing-water/{eudbwid}/completed-by/{date}";
    rdfs:comment    "Returns a list of most recent Suspension Of Monitoring records for suspensions at a given bathing water that completed on or before a given date"@en;
    api:selector    [
    api:where   """
  BIND(xsd:date(CONCAT(SUBSTR(?date,1,4),"-",
                       SUBSTR(?date,5,2),"-",
                       SUBSTR(?date,7,2) )) as ?dateOfInterest)
 
  ?item       a                               def-som:SuspensionOfMonitoring;
              def-bw:bathingWater             ?bw;
              def-som:startOfSuspension       ?startOfSuspension;
              def-som:recordDateTime          ?recordDateTime;
              .
   OPTIONAL {       
     ?item2 a                           def-som:SuspensionOfMonitoring;
            def-bw:bathingWater         ?bw;
            def-som:startOfSuspension   ?startOfSuspension;
            def-som:recordDateTime      ?recordDateTime2 .
     FILTER (?item != ?item2 && ?recordDateTime2>?recordDateTime)
  }
  FILTER(!bound(?item2))
  ?item   def-som:endOfSuspension ?endOfSuspension .   
  FILTER(xsd:date(?endOfSuspension) < ?dateOfInterest)
""";
    api:orderBy "DESC(?endOfSuspension)";
    ];
    api:viewer          api:describeViewer,
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:defaultViewer   api:describeViewer;
    .

###############################################################################
# Short Term Pollution Risk Predictions
###############################################################################
t:api   api:endpoint    t:stpPredictions .
t:stpPredictions
    a               api:ListEndpoint ;
    rdfs:comment    "Returns a list of short-term pollution risk predictions."@en;
    api:uriTemplate "/doc/bathing-water-quality/stp-risk-prediction" ;
    api:exampleRequestPath  "/doc/bathing-water-quality/stp-risk-prediction";
    api:selector [
        api:filter  "type=RiskPrediction"
    ];
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer, t:stpViewer ;
    api:defaultViewer api:describeViewer
    .

###############################################################################
t:api   api:endpoint    t:stpPrediction .
t:stpPrediction
    a                   api:ItemEndpoint ;
    rdfs:comment        "Describes a particular short-term pollution risk prediction"@en;
    api:uriTemplate     "/data/bathing-water-quality/stp-risk-prediction/point/{bwspid}/date/{date}" ;
    api:exampleRequestPath "/data/bathing-water-quality/stp-risk-prediction/point/04700/date/20131002-082846";
    api:itemTemplate     "http://environment.data.gov.uk/data/bathing-water-quality/stp-risk-prediction/point/{bwspid}/date/{date}" ;
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer, t:stpViewer ;
    api:defaultViewer api:describeViewer
    .
    
###############################################################################
t:api   api:endpoint        t:stpPredictionsBySamplingPoint .
t:stpPredictionsBySamplingPoint
    a                   api:ListEndpoint ;
    elda:cacheExpiryTime  "1m";
    rdfs:comment        "Returns a most recent first list of short-term pollution risk predictions associated with a given sampling point."@en;
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/point/{bwspid}";
    # 'hook' a 303 redirect for truncated stp resik prediction URI
    api:itemTemplate    "http://environment.data.gov.uk/data/bathing-water-quality/stp-risk-prediction/point/{bwspid}/date";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/point/04700";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   "?item def-stp:samplingPoint ?sp .";
        api:sort    "-predictedAt,-publishedAt"     
    ];
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer, t:stpViewer ;
    api:defaultViewer api:describeViewer
    .
  
###############################################################################
t:api   api:endpoint        t:stpPredictionsByBathingWater .
t:stpPredictionsByBathingWater
    a                   api:ListEndpoint ;
    rdfs:comment        "Returns a most recent first list of short-term pollution risk predictions associated with a given bathing water."@en;
    elda:cacheExpiryTime  "1m";
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/bathing-water/{eubwid}";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/bathing-water/ukd1102-44400";
    api:selector        [
        api:filter  "type=RiskPrediction" ;       
        api:where   "?item def-stp:bathingWater ?bw .";
        api:sort    "-predictedAt,-publishedAt"     
    ];
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer, t:stpViewer ;
    api:defaultViewer api:describeViewer
    .

###############################################################################
# Original implementation with "latest on-or-before" semantics (retired)
###############################################################################
#t:api   api:endpoint        t:stpPredictionsBySamplingPointDate .
t:stpPredictionsBySamplingPointDate
    a                   api:ListEndpoint ;
    elda:cacheExpiryTime  "1m";
    rdfs:comment        "Returns the most recent short-term pollution risk predictions on or before a given date for given sampling point."@en;
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/point/{bwspid}/latestOn/{yyyymmdd}";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/point/44400/latestOn/20130704";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   """
BIND(xsd:date(CONCAT(SUBSTR(?yyyymmdd,1,4),"-",
                       SUBSTR(?yyyymmdd,5,2),"-",
                       SUBSTR(?yyyymmdd,7,2) )) as ?doi)
?item def-stp:samplingPoint ?sp ;
      def-stp:predictedOn ?day ;
      def-stp:predictedAt ?predictedAt ;
      def-stp:publishedAt ?publishedAt ;
      . 
FILTER NOT EXISTS { 
    ?item2 def-stp:samplingPoint ?sp ;
           def-stp:predictedOn ?day2 ;
           def-stp:predictedAt ?predictedAt2 ;
           def-stp:publishedAt ?publishedAt2 ;
           . 
    FILTER ( (?item2 != ?item) &&
             (?day2 <= ?doi) && 
             (?day2 >= ?day) &&
             (?predictedAt2 >= ?predictedAt) &&
             (?publishedAt2 > ?publishedAt) )
}
FILTER (?day <= ?doi)
""";
        api:sort    "-predictedAt,-publishedAt"     
    ];
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer, t:stpViewer ;
    api:defaultViewer api:describeViewer
    .
    
###############################################################################
# Original implementation with "latest on-or-before" semantics (retired)
###############################################################################
#t:api   api:endpoint        t:stpPredictionsByBathingWaterDate .
t:stpPredictionsByBathingWaterDate
    rdfs:comment        "Returns the most recent short-term pollution risk predictions on or before a given date for given bathing water"@en;
    a                   api:ListEndpoint ;
    elda:cacheExpiryTime  "1m";
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/bathing-water/{eubwid}/latestOn/{yyyymmdd}";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/bathing-water/ukd1102-44400/latestOn/20130704";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   """
BIND(xsd:date(CONCAT(SUBSTR(?yyyymmdd,1,4),"-",
                       SUBSTR(?yyyymmdd,5,2),"-",
                       SUBSTR(?yyyymmdd,7,2) )) as ?doi)
?item def-stp:bathingWater ?bw ;
      def-stp:predictedOn ?day ;
      def-stp:predictedAt ?predictedAt ;
      def-stp:publishedAt ?publishedAt ;
      . 
FILTER NOT EXISTS { 
    ?item2 def-stp:bathingWater ?bw ;
           def-stp:predictedOn ?day2 ;
           def-stp:predictedAt ?predictedAt2 ;
           def-stp:publishedAt ?publishedAt2 ;
           . 
    FILTER ( (?item2 != ?item) &&
             (?day2 <= ?doi) && 
             (?day2 >= ?day) &&
             (?predictedAt2 >= ?predictedAt) &&
             (?publishedAt2 > ?publishedAt) )
}
FILTER (?day <= ?doi)
""";
        api:sort    "-predictedAt,-publishedAt"     
    ];    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer,  t:stpViewer ;
    api:defaultViewer api:describeViewer
    .

###############################################################################
# Revised implementation with "latest on" semantics
###############################################################################
t:api   api:endpoint        t:stpPredictionsBySamplingPointDateRevised .
t:stpPredictionsBySamplingPointDateRevised
    a                   api:ListEndpoint ;
    elda:cacheExpiryTime  "1m";
    rdfs:comment        "Returns the most recent short-term pollution risk predictions on a given date for given sampling point."@en;
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/point/{bwspid}/latestOn/{yyyymmdd}";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/point/44400/latestOn/20130704";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   """
BIND(xsd:date(CONCAT(SUBSTR(?yyyymmdd,1,4),"-",
                       SUBSTR(?yyyymmdd,5,2),"-",
                       SUBSTR(?yyyymmdd,7,2) )) as ?doi)
?item def-stp:samplingPoint ?sp ;
      def-stp:predictedOn ?doi ;
      def-stp:predictedAt ?predictedAt ;
      def-stp:publishedAt ?publishedAt ;
      . 
FILTER NOT EXISTS { 
    ?item2 def-stp:samplingPoint ?sp ;
           def-stp:predictedOn ?doi ;
           def-stp:predictedAt ?predictedAt2 ;
           def-stp:publishedAt ?publishedAt2 ;
           . 
    FILTER ( (?item2 != ?item) &&
             (?predictedAt2 >= ?predictedAt) &&
             (?publishedAt2 > ?publishedAt) )
}
""";
        api:sort    "-predictedAt,-publishedAt"     
    ];
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer, t:stpViewer ;
    api:defaultViewer api:describeViewer
    .
    
###############################################################################
# Revised implementation with "latest on" semantics
###############################################################################
t:api   api:endpoint        t:stpPredictionsByBathingWaterDateRevised .
t:stpPredictionsByBathingWaterDateRevised
    rdfs:comment        "Returns the most recent short-term pollution risk predictions on a given date for given bathing water"@en;
    a                   api:ListEndpoint ;
    elda:cacheExpiryTime  "1m";
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/bathing-water/{eubwid}/latestOn/{yyyymmdd}";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/bathing-water/ukd1102-44400/latestOn/20130704";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   """
BIND(xsd:date(CONCAT(SUBSTR(?yyyymmdd,1,4),"-",
                       SUBSTR(?yyyymmdd,5,2),"-",
                       SUBSTR(?yyyymmdd,7,2) )) as ?doi)
?item def-stp:bathingWater ?bw ;
      def-stp:predictedOn ?doi ;
      def-stp:predictedAt ?predictedAt ;
      def-stp:publishedAt ?publishedAt ;
      . 
FILTER NOT EXISTS { 
    ?item2 def-stp:bathingWater ?bw ;
           def-stp:predictedOn ?doi ;
           def-stp:predictedAt ?predictedAt2 ;
           def-stp:publishedAt ?publishedAt2 ;
           . 
    FILTER ( (?item2 != ?item) &&
             (?predictedAt2 >= ?predictedAt) &&
             (?publishedAt2 > ?publishedAt) )
}
""";
        api:sort    "-predictedAt,-publishedAt"     
    ];    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer,  t:stpViewer ;
    api:defaultViewer api:describeViewer
    .

###############################################################################
# Replacement endpoint with improved performance and "latest on-or-before" semantics
###############################################################################
t:api   api:endpoint        t:stpPredictionsBySamplingPointDateOnOrBefore .
t:stpPredictionsBySamplingPointDateOnOrBefore
    a                   api:ListEndpoint ;
    elda:cacheExpiryTime  "1m";
    rdfs:comment        "Returns the most recent short-term pollution risk predictions on or before a given date for given sampling point."@en;
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/point/{bwspid}/latestOnOrBefore/{yyyymmdd}";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/point/44400/latestOnOrBefore/20130704";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   """
    { SELECT (max(?day) as ?maxDay) WHERE {
        BIND(xsd:date(CONCAT(SUBSTR(?yyyymmdd,1,4),"-",
                      SUBSTR(?yyyymmdd,5,2),"-",
                      SUBSTR(?yyyymmdd,7,2) )) as ?doi)
        ?item def-stp:samplingPoint ?sp ;
              def-stp:predictedOn ?day ;
        .
        FILTER (?day <= ?doi)
      }
    }
?item def-stp:samplingPoint ?sp ;
      def-stp:predictedOn ?maxDay ;
      def-stp:predictedAt ?predictedAt ;
      def-stp:publishedAt ?publishedAt ;
      . 
FILTER NOT EXISTS { 
    ?item2 def-stp:samplingPoint ?sp ;
           def-stp:predictedOn ?maxDay ;
           def-stp:predictedAt ?predictedAt2 ;
           def-stp:publishedAt ?publishedAt2 ;
           . 
    FILTER ( (?item2 != ?item) &&
             (?predictedAt2 >= ?predictedAt) &&
             (?publishedAt2 > ?publishedAt) )
}
""";
        api:sort    "-predictedAt,-publishedAt"     
    ];
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer, t:stpViewer ;
    api:defaultViewer api:describeViewer
    .
    
###############################################################################
# Replacement endpoint with improved performance and "latest on-or-before" semantics
###############################################################################
t:api   api:endpoint        t:stpPredictionsByBathingWaterDateOnOrBefore .
t:stpPredictionsByBathingWaterDateOnOrBefore
    rdfs:comment        "Returns the most recent short-term pollution risk predictions on or before a given date for given bathing water"@en;
    a                   api:ListEndpoint ;
    elda:cacheExpiryTime  "1m";
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/bathing-water/{eubwid}/latestOnOrBefore/{yyyymmdd}";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/bathing-water/ukd1102-44400/latestOnOrBefore/20130704";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   """
    { SELECT (max(?day) as ?maxDay) WHERE {
        BIND(xsd:date(CONCAT(SUBSTR(?yyyymmdd,1,4),"-",
                      SUBSTR(?yyyymmdd,5,2),"-",
                      SUBSTR(?yyyymmdd,7,2) )) as ?doi)
        ?item def-stp:bathingWater ?bw ;
              def-stp:predictedOn ?day ;
        .
        FILTER (?day <= ?doi)
      }
    }

    ?item def-stp:bathingWater ?bw ;
          def-stp:predictedOn ?maxDay ;
          def-stp:predictedAt ?predictedAt ;
          def-stp:publishedAt ?publishedAt ;
          . 
FILTER NOT EXISTS { 
    ?item2 def-stp:bathingWater ?bw ;
           def-stp:predictedOn ?maxDay ;
           def-stp:predictedAt ?predictedAt2 ;
           def-stp:publishedAt ?publishedAt2 ;
           . 
    FILTER ( (?item2 != ?item) &&
             (?predictedAt2 >= ?predictedAt) &&
             (?publishedAt2 > ?publishedAt) )
}
""";
        api:sort    "-predictedAt,-publishedAt"     
    ];    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer,  t:stpViewer ;
    api:defaultViewer api:describeViewer
    .

###############################################################################
#
# This is the original implementation of predictions by date which has "on-or-before" semantics.
# It uses a poor search strategy which has become unusably slow.
#
# Further below:
#
# t:api   api:endpoint        t:stpPredictionsByDateRevised
#
# implements a revised strategy that is much more performant... but which changes the API semantics
# to strictly, latest-on-date rather that "on-or-before".
#
# Finally:
#
# t:api   api:endpoint        t:stpPredictionsByDateOnOrBefore .
# 
# provides a more performant implementation of the original "on-or-before" semantics.
#
# skw (2014-08-14) 
#  
###############################################################################
#t:api   api:endpoint        t:stpPredictionsByDate .
t:stpPredictionsByDate
    rdfs:comment        "Returns a list of the most recent short-term pollution risk predictions on or before a given date all bathing waters"@en;
    elda:cacheExpiryTime  "1m";
    a                   api:ListEndpoint ;
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/latestOn/{yyyymmdd}";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/latestOn/20130704";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   """
BIND(xsd:date(CONCAT(SUBSTR(?yyyymmdd,1,4),"-",
                       SUBSTR(?yyyymmdd,5,2),"-",
                       SUBSTR(?yyyymmdd,7,2) )) as ?doi)
?item def-stp:bathingWater ?bw1 ;
      def-stp:predictedOn ?day ;
      def-stp:predictedAt ?predictedAt ;
      def-stp:publishedAt ?publishedAt ;
      .
FILTER NOT EXISTS { 
    ?item2 def-stp:bathingWater ?bw1 ;
           def-stp:predictedOn ?day2 ;
           def-stp:predictedAt ?predictedAt2 ;
           def-stp:publishedAt ?publishedAt2 ;
           . 
    FILTER ( (?item2 != ?item) &&
             (?day2 <= ?doi) && 
             (?day2 >= ?day) &&
             (?predictedAt2 >= ?predictedAt) &&
             (?publishedAt2 > ?publishedAt) )
}
FILTER (?day <= ?doi)
""";
        api:sort    "stp_samplingPoint.samplePointNotation,-predictedAt,-publishedAt"     
    ];
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer, t:stpViewer ;
    api:defaultViewer api:describeViewer
    .
        
###############################################################################
t:api   api:endpoint        t:stpPredictionsByDateRevised .
t:stpPredictionsByDateRevised
    rdfs:comment        "Returns a list of the most recent short-term pollution risk predictions on a given date for all bathing waters"@en;
    elda:cacheExpiryTime  "1m";
    a                   api:ListEndpoint ;
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/latestOn/{yyyymmdd}";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/latestOn/20130704";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   """
BIND(xsd:date(CONCAT(SUBSTR(?yyyymmdd,1,4),"-",
                       SUBSTR(?yyyymmdd,5,2),"-",
                       SUBSTR(?yyyymmdd,7,2) )) as ?doi)

?item def-stp:bathingWater ?bw1 ;
      def-stp:predictedOn  ?doi ;
      def-stp:predictedAt  ?predictedAt ;
      def-stp:publishedAt  ?publishedAt ;
      .
FILTER NOT EXISTS { 
    ?item2 def-stp:bathingWater ?bw1 ;
           def-stp:predictedOn  ?doi ;
           def-stp:predictedAt  ?predictedAt2 ;
           def-stp:publishedAt  ?publishedAt2 ;
           . 
    FILTER ( (?item2 != ?item) &&
             (?predictedAt2 >= ?predictedAt) &&
             (?publishedAt2 > ?publishedAt) )
}
""";
        api:sort    "stp_samplingPoint.samplePointNotation,-predictedAt,-publishedAt"     
    ];
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer, t:stpViewer ;
    api:defaultViewer api:describeViewer
    .
###############################################################################
t:api   api:endpoint        t:stpPredictionsByDateOnOrBefore .
t:stpPredictionsByDateOnOrBefore 
    rdfs:comment        "Returns a list of the most recent short-term pollution risk predictions on or before a given date all bathing waters"@en;
    elda:cacheExpiryTime  "1m";
    a                   api:ListEndpoint ;
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/latestOnOrBefore/{yyyymmdd}";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/latestOnOrBefore/20130704";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   """
    { SELECT ?bw1 (max(?day) as ?maxDay) WHERE {
        BIND(xsd:date(CONCAT(SUBSTR(?yyyymmdd,1,4),"-",
                      SUBSTR(?yyyymmdd,5,2),"-",
                      SUBSTR(?yyyymmdd,7,2) )) as ?doi)
        ?item def-stp:bathingWater ?bw1 ;
              def-stp:predictedOn ?day ;
        .
        FILTER (?day <= ?doi)
      } GROUP BY ?bw1
    }

?item def-stp:bathingWater ?bw1 ;
      def-stp:predictedOn ?maxDay ;
      def-stp:predictedAt ?predictedAt ;
      def-stp:publishedAt ?publishedAt ;
      .
FILTER NOT EXISTS { 
    ?item2 def-stp:bathingWater ?bw1 ;
           def-stp:predictedOn ?maxDay ;
           def-stp:predictedAt ?predictedAt2 ;
           def-stp:publishedAt ?publishedAt2 ;
           . 
    FILTER ( (?item2 != ?item) &&
             (?predictedAt2 >= ?predictedAt) &&
             (?publishedAt2 > ?publishedAt) )
}
""";
        api:sort    "stp_samplingPoint.samplePointNotation,-predictedAt,-publishedAt"     
    ];
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer, t:stpViewer ;
    api:defaultViewer api:describeViewer
    .
###############################################################################
##
## Interim Fix API endpoints
## replacement behaviours for:
##
##     api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/point/{bwspid}/latestOn/{yyyymmdd}";
##     api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/bathing-water/{eubwid}/latestOn/{yyyymmdd}";
##     api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/latestOn/{yyyymmdd}";
##
## Replaced with versions that use the latestRiskPrediction links and only return
## the current latest... ie. yyyymmdd is ignored.
## 
###############################################################################
##disabled##  t:api   api:endpoint        t:stpPredictionsBySamplingPointDateAlt .
t:stpPredictionsBySamplingPointDateAlt
    a                   api:ListEndpoint ;
    elda:cacheExpiryTime  "1m";
    rdfs:comment        "Returns the most recent short-term pollution risk predictions on or before a given date for given sampling point."@en;
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/point/{bwspid}/latestOn/{yyyymmdd}";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/point/44400/latestOn/20130704";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   "?sp def-bw:bathingWater/def-stp:latestRiskPrediction ?item ." ;
        api:sort    "-predictedAt,-publishedAt"     
    ];
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer, t:stpViewer ;
    api:defaultViewer api:describeViewer
    .
    
###############################################################################
##disabled## t:api   api:endpoint        t:stpPredictionsByBathingWaterDateAlt .
t:stpPredictionsByBathingWaterDateAlt
    elda:cacheExpiryTime  "1m";
    rdfs:comment        "Returns the most recent short-term pollution risk predictions on or before a given date for given bathing water"@en;
    a                   api:ListEndpoint ;
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/bathing-water/{eubwid}/latestOn/{yyyymmdd}";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/bathing-water/ukd1102-44400/latestOn/20130704";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   "?bw def-stp:latestRiskPrediction ?item ." ;
        api:sort    "-predictedAt,-publishedAt"     
        
    ];    
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer,  t:stpViewer ;
    api:defaultViewer api:describeViewer
    .
###############################################################################
##disabled##  t:api   api:endpoint        t:stpPredictionsByDateAlt .
t:stpPredictionsByDateAlt
    elda:cacheExpiryTime  "1m";
    rdfs:comment        "Returns a list of the most recent short-term pollution risk predictions on or before a given date all bathing waters"@en;
    a                   api:ListEndpoint ;
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/latestOn/{yyyymmdd}";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/latestOn/20130704";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   "?bw1 def-stp:latestRiskPrediction ?item .";
        api:sort    "stp_samplingPoint.samplePointNotation,-predictedAt,-publishedAt"     
    ];
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer, t:stpViewer ;
    api:defaultViewer api:describeViewer
    .
        
###############################################################################
t:stpViewer
    a       api:Viewer;
    api:name    "prediction";
    api:properties  "predictedOn,predictedAt,expiresAt,publishedAt,riskLevel.name,stp_bathingWater.name,comment,source,type" ;
    .

###############################################################################
#
# New latestRiskPrediction endpoints.
# 
###############################################################################
t:api   api:endpoint        t:latestStpPredictionsBySamplingPoint .
t:latestStpPredictionsBySamplingPoint
    a                   api:ListEndpoint ;
    elda:cacheExpiryTime  "1m";
    rdfs:comment        "Returns the most recent short-term pollution risk predictions for given sampling point."@en;
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/point/{bwspid}/latest";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/point/44400/latest";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   "?sp def-bw:bathingWater/def-stp:latestRiskPrediction ?item ."
    ];
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer, t:stpViewer ;
    api:defaultViewer api:describeViewer
    .
    
###############################################################################
t:api   api:endpoint        t:latestStpPredictionsByBathingWater .
t:latestStpPredictionsByBathingWater
    rdfs:comment        "Returns the most recent short-term pollution risk predictions for given bathing water"@en;
    a                   api:ListEndpoint ;
    elda:cacheExpiryTime  "1m";
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/bathing-water/{eubwid}/latest";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/bathing-water/ukd1102-44400/latest";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   "?bw def-stp:latestRiskPrediction ?item ."
    ];    
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer,  t:stpViewer ;
    api:defaultViewer api:describeViewer
    .
###############################################################################
t:api   api:endpoint        t:latestStpPredictions .
t:latestStpPredictions
    rdfs:comment        "Returns a list of the most recent short-term pollution risk predictions for all bathing waters"@en;
    a                   api:ListEndpoint ;
    elda:cacheExpiryTime  "1m";
    api:uriTemplate     "/doc/bathing-water-quality/stp-risk-prediction/latest";
    api:exampleRequestPath "/doc/bathing-water-quality/stp-risk-prediction/latest";
    api:selector        [
        api:filter  "type=RiskPrediction";
        api:where   "?bw1 def-stp:latestRiskPrediction ?item .";
        api:sort    "stp_samplingPoint.samplePointNotation,-predictedAt,-publishedAt"     
    ];
    api:viewer  api:describeViewer, api:basicViewer, api:labelledDescribeViewer, t:stpViewer ;
    api:defaultViewer api:describeViewer
    .

###############################################################################
# Labels
###############################################################################
# Common #

rdf:Property api:label "Property" ;
             a         rdfs:Class .

rdf:type    api:label "type" ; 
            api:multiValued true ;
            rdfs:range rdfs:Class .

rdf:value   api:label "value" .
            
rdfs:Class api:label "Class" ;
           a         rdfs:Class .

rdfs:label   api:label "label" ;
             api:multiValued true ;
             api:structured "true"^^xsd:boolean;
             a rdf:Property .
             
rdfs:seeAlso api:label "seeAlso" ; api:multiValued true ;
             rdfs:range     rdfs:Resource .
             
rdfs:comment api:label "comment" ;
             api:multiValued "false"^^xsd:boolean ;
             api:structured "true"^^xsd:boolean;
             a  rdf:Property .
             
rdfs:range   api:label "range" ;
             rdfs:range rdfs:Resource .
             
rdfs:domain  api:label "domain";
             rdfs:range rdfs:Resource .
             
rdfs:isDefinedBy api:label "isDefinedBy" ;
             rdfs:range rdfs:Resource .
             
rdfs:subClassOf api:label "subClassOf" ;
             rdfs:range rdfs:Class .
             
rdfs:subPropertyOf api:label "subPropertyOf" ;
             rdfs:range rdf:Property .

###############################################################################
## OWL 
###############################################################################
owl:imports  api:label  "imports";
             rdfs:range rdfs:Resource .
             
owl:onProperty
             api:label  "onProperty";
             rdfs:range rdf:Property .
             
owl:sameAs   api:label "sameAs" ;
             rdfs:range rdfs:Resource .
             
owl:versionInfo
            a           rdf:Property ;
            api:label   "versionInfo";
            .
            
owl:DatatypeProperty
            a           owl:Class;
            api:label   "DatatypeProperty";
            .
owl:ObjectProperty
            a           owl:Class;
            api:label   "ObjectProperty";
            .
            
###############################################################################
## SKOS
###############################################################################
skos:Concept api:label "Concept" ;
             a         rdfs:Class .
             
skos:ConceptScheme 
             api:label "ConceptScheme" ;
             a         rdfs:Class .

skos:prefLabel
            api:label "name" ;
            api:structured "true"^^xsd:boolean;
            a           rdf:Property .
            
skos:altLabel
            api:label "alias" ; api:multiValued true ;
            api:structured "true"^^xsd:boolean;
            a         rdf:Property  .
            
skos:note       api:label "note" ;
            api:structured "true"^^xsd:boolean;
            a         rdf:Property  .
            
skos:notation   a owl:DatatypeProperty; api:label "notation"  .

skos:scopeNote  api:label "scopeNote" ;
            api:structured "true"^^xsd:boolean;
            a   rdf:Property  .
            
skos:topConceptOf api:label "topConceptOf" ;
            rdfs:range      skos:ConceptScheme .
            
skos:hasTopConcept api:label "topConcept" ; api:multiValued true ;
            rdfs:range      skos:Concept .
            
skos:broader    api:label "broader" ; api:multiValued true ;
             rdfs:range      skos:Concept .

skos:narrower   api:label "narrower" ; api:multiValued true ;
             rdfs:range      skos:Concept .
            
skos:definition a         rdf:Property;
                api:label "definition" ;
                api:structured  "true"^^xsd:boolean;
                . 
#                api:multiValued true .

skos:inScheme
            api:label "inScheme";
            rdfs:range  skos:ConceptScheme .


###############################################################################
## WGS 84 Geo
###############################################################################
geo:lat
  api:label "lat" ;
  rdfs:range xsd:decimal .
  
geo:long
  api:label "long" ;
  rdfs:range xsd:decimal .


###############################################################################
## OS Spatial Relations
###############################################################################
spatialrelations:easting 
  api:label "easting" ;
  rdfs:range xsd:decimal;
  .
  
spatialrelations:northing 
  api:label "northing" ;
  rdfs:range xsd:decimal;
  .

spatialrelations:containedBy api:label "containedBy" ;
    rdfs:range      rdfs:Resource .
    
spatialrelations:contains api:label "contains" ;
    rdfs:range      rdfs:Resource .
    
spatialrelations:borders api:label "borders" ;
    rdfs:range      rdfs:Resource .
    
##########################################################
## ONS Admin Geo's
##########################################################
onsadmingeo:district api:label "district" ;
    rdfs:range      rdfs:Resource .

onsadmingeo:country
    api:label        "country";
    rdfs:range      onsadmingeo:Country
    .
    
onsadmingeo:county
    api:label        "county";
    rdfs:range      rdfs:Resource;
    .

onsadmingeo:coverage api:label "coverage" ;
    rdfs:range      rdfs:Resource .
    
onsadmingeo:LocalAuthorityDistrict api:label "LocalAuthorityDistrict" ;
    a               rdfs:Class .
        
###############################################################################
## OS Admin Geo.
###############################################################################
osadmingeo:gssCode
    api:label   "gssCode";
    a  rdf:Property .
  

##########################################################
# DC Terms
##########################################################
dct:source api:label "source" .

dct:contributor api:label   "contributor" ;
    rdfs:range      rdfs:Resource .

dct:isReplacedBy    api:label   "isReplacedBy" ;
    rdfs:range      rdfs:Resource .
            
dct:replaces        api:label   "replaces" ;
    rdfs:range      rdfs:Resource .


dct:modified    api:label   "modified";
                rdfs:range  xsd:date . 
                
dct:created     api:label   "created";
                rdfs:range  xsd:date . 

dct:license     api:label   "license";
                rdfs:range  rdfs:Resource . 

dct:description
             api:structured "true"^^xsd:boolean;
             api:label   "description" .
             
dct:publisher
            api:label       "publisher";
            rdfs:range      rdfs:Resource;
            .

##########################################################
# foaf
##########################################################
foaf:name       api:label  "who" ;
                api:structured "true"^^xsd:boolean;
                a          rdf:Property .
                 
foaf:mbox       api:label   "mbox" ;
                rdfs:range  api:SimpleLiteral;
                .
                
foaf:primaryTopic
                api:label   "primaryTopic";
                rdfs:range  rdfs:Resource;
                .                
                                
foaf:isPrimaryTopicOf
                api:label   "isPrimaryTopicOf";
                rdfs:range  rdfs:Resource;
                .                       
                                
##########################################################
# cube 
##########################################################
qb:dataSet  api:label  "dataset" ;
            rdfs:range  qb:DataSet .

qb:DataSet
            api:label   "DataSet";
            a           rdfs:Class .

        
qb:Observation  a           owl:Class;
                api:label   "Observation"@en ;
                .
            
qb:observation api:label "observation" ;
               rdfs:range   qb:Observation .

qb:slice       api:label    "slice";
               rdfs:range   qb:Slice .
               
qb:structure
               api:label   "structure";
               rdfs:range   qb:DataStructureDefinition .
               
               
qb:sliceStructure
               api:label "sliceStructure";
               rdfs:range qb:SliceKey .            

qb:component
               api:label   "component";
               rdfs:range  qb:ComponentSpecification .
               
qb:dimension
               api:label   "dimension";
               rdfs:range  qb:DimensionProperty .

qb:measure
               api:label   "measure";
               rdfs:range  qb:MeasureProperty .

qb:attribute
               api:label   "attribute";
               rdfs:range  qb:AttributeProperty .

qb:componentProperty
               api:label   "componentProperty";
               rdfs:range  qb:ComponentProperty .

qb:sliceKey    api:label   "sliceKey"; 
               rdfs:range  qb:SliceKey .               


qb:AttributeProperty
               a            rdfs:Class, owl:Class;
               api:label    "AttributeProperty";
               .
               
qb:MeasureProperty
               a            rdfs:Class, owl:Class;
               api:label    "MeasureProperty";
               .
               
qb:DimensionProperty
               a            rdfs:Class, owl:Class;
               api:label    "DimensionProperty";
               .

qb:ComponentProperty
               a            rdfs:Class, owl:Class;
               api:label    "ComponentProperty";
               .
               
##########################################################
## Bathing Waters
##########################################################
def-bw:BathingWater api:label    "BathingWater";
                    a             owl:Class .
                    
def-bw:LakeBathingWater
                    api:label    "LakeBathingWater";
                    a             owl:Class .
                    
def-bw:TransitionalBathingWater
                    api:label    "TransitionalBathingWater";
                    a             owl:Class .
                    
def-bw:CoastalBathingWater
                    api:label    "CoastalBathingWater";
                    a             owl:Class .
                    
def-bw:InlandBathingWater
                    api:label    "InlandBathingWater";
                    a             owl:Class .

def-bw:bathingWater   api:label   "bathingWater";
            rdfs:range  def-bw:BathingWater .

def-bw:eubwidNotation api:label   "eubwidNotation";
            rdfs:range  def-bw:eubwid .
            
def-bw:eubwid   a   rdfs:Datatype;
                api:label   "eubwid" .
                
def-bw:waterQualityImpactedByHeavyRain
    api:label    "waterQualityImpactedByHeavyRain";
    rdfs:range  xsd:boolean;
    .
def-bw:regionalOrganization
    api:label    "regionalOrganization";
    rdfs:range  org:Organization;
    .    
#-----------------------------------------------------------
#- Sediment
#-----------------------------------------------------------
def-bw:sedimentTypesPresent
    api:label        "sedimentTypesPresent";
    rdfs:range      def-bw:SedimentType;
    .
def-bw:SedimentType
    a               owl:Class;
    api:label        "Sediment";
    .
 
def-bw:mud-sediment
#    a               def-bw:SedimentType;
    api:label        "mud";
    .
    
def-bw:marsh-sediment
#   a               def-bw:SedimentType;
    api:label        "marsh";
    .
    
def-bw:rock-sediment
#    a               def-bw:SedimentType;
    api:label        "rock";
    .
    
def-bw:sand-sediment
#   a               def-bw:SedimentType;
    api:label        "sand";
    .
    
def-bw:shingle-sediment
#   a               def-bw:SedimentType;
    api:label        "shingle";
    .
    
def-bw:other-sediment
#   a               def-bw:SedimentType;
    api:label        "other";
    .

def-bw:yearDesignated
    rdfs:range      interval:CalendarYear;
    api:label        "yearDesignated";
    .   
    
def-bw:yearDedesignated
    rdfs:range      interval:CalendarYear;
    api:label        "yearDedesignated";
    .   
    
##########################################################
## Sampling Points
##########################################################
def-ef:samplingPoint api:label  "samplingPoint" ;
            rdfs:range      def-ef:SamplingPoint .
                    
def-ef:SamplingPoint api:label  "SamplingPoint" ;
                    a               owl:Class .

def-ef:samplePointNotation 
                   rdfs:range   def-ef:samplePointCode;
                   api:label    "samplePointNotation" .

def-ef:samplePointCode
                a   rdfs:Datatype;
                api:label   "samplePointCode" .
                           
##########################################################
## Quality Assessments
##########################################################
def-bwq:SampleAssessment api:label  "SampleAssessment" ; 
                   a            owl:Class .
                   
def-bwq:ComplianceAssessment api:label  "ComplianceAssessment" ;
                    a           owl:Class .

def-bwq:sampleDateTime api:label  "sampleDateTime";
            rdfs:range  time:Instant .
                     
def-bwq:sampleWeek     api:label  "sampleWeek";
            rdfs:range  interval:Iso8601Week .
                     
def-bwq:sampleYear   api:label  "sampleYear";
            rdfs:range  interval:CalendarYear .
                     
def-bwq:recordStatus
         a          owl:ObjectProperty;
         api:label  "recordStatus" ;
         rdfs:range def-bwq:RecordStatus .

def-bwq:recordDate
         a          owl:DatatypeProperty;
         api:label  "recordDate" ;
         rdfs:range xsd:date .

def-bwq:withdrawal       api:label  "withdrawal" .
def-bwq:replacement      api:label  "replacement" .
def-bwq:new              api:label  "new" .

def-bwq:samplingPoint   api:label  "bwq_samplingPoint" ;
            rdfs:range      def-ef:SamplingPoint .
                    
def-bwq:bathingWater     api:label  "bwq_bathingWater" ;
            rdfs:range  def-bw:BathingWater .

def-bwq:ByWeekSlice      api:label  "ByWeekSlice" ;
                     a           owl:Class .
                        
def-bwq:ByYearSlice      api:label  "ByYearSlice" ;
                     a           owl:Class .
                     
def-bwq:BySamplingPointYearSlice
                     api:label  "BySamplingPointYearSlice" ;
                     a           owl:Class .

def-bwq:BySamplingPointSlice
                     api:label  "BySamplingPointSlice" ;
                     a           owl:Class .

def-bwq:ComplianceBySamplingPointSlice
                     a          owl:Class;
                     api:label  "ComplianceBySamplingPointSlice" .

def-bwq:ComplianceByYearSlice
                     api:label  "ComplianceByYearSlice" ;
                     a           owl:Class .

def-bwq:sampleClassification api:label "sampleClassification" ;
            rdfs:range  def-bwq:Compliance .
                    
def-bwq:complianceClassification api:label "complianceClassification" ;
            rdfs:range   def-bwq:Compliance .

def-bwq:complianceCodeNotation
                    a           owl:DatatypeProperty;
                    api:label   "complianceCodeNotation";
                    rdfs:range  def-bwq:complianceCode .
                           
def-bwq:complianceCode  api:label "complianceCode" ;
                    a          rdfs:Datatype .

def-bwq:countQualifierNotation
                    a       owl:DatatypeProperty;
                    api:label   "countQualifierNotation";
                    rdfs:range  def-bwq:countQualifierCode;
                    .

def-bwq:totalColiformQualifier
            api:label   "totalColiformQualifier" ;
            rdfs:range  def-bwq:CountQualifier .
                                
def-bwq:totalColiformCount
            api:label    "totalColiformCount";
            rdfs:range  xsd:integer  .

def-bwq:faecalColiformQualifier     
            api:label       "faecalColiformQualifier" ;
            rdfs:range      def-bwq:CountQualifier .
                                
def-bwq:faecalColiformCount
            api:label "faecalColiformCount";
            rdfs:range  xsd:integer  .
                                

def-bwq:faecalStreptococciQualifier
            api:label   "faecalStreptococciQualifier" ;
            rdfs:range  def-bwq:CountQualifier .
                                
def-bwq:faecalStreptococciCount
            api:label "faecalStreptococciCount" ;
            rdfs:range  xsd:integer .

def-bwq:entrovirusQualifier
            api:label    "entrovirusQualifier" ;
            rdfs:range   def-bwq:CountQualifier .

def-bwq:entrovirusCount
            api:label "entrovirusCount" ;
            rdfs:range  xsd:integer .

def-bwq:intestinalEnterococciCount
            api:label "intestinalEnterococciCount" ;
            rdfs:range  xsd:integer .

def-bwq:intestinalEnterococciQualifier
            api:label "intestinalEnterococciQualifier" ;
            rdfs:range   def-bwq:CountQualifier .

def-bwq:escherichiaColiCount
            api:label "escherichiaColiCount" ;
            rdfs:range  xsd:integer .

def-bwq:escherichiaColiQualifier
            api:label "escherichiaColiQualifier" ;
            rdfs:range   def-bwq:CountQualifier .

def-bwq:salmonellaPresent
            api:label   "salmonellaPresent" ;
            rdfs:range  def-bwq:Presence .
            
def-bwq:present      api:label   "present".
def-bwq:not-present api:label "not-present".
def-bwq:not-assessed api:label  "not-assessed".                                
def-bwq:presenceNotation
            api:label   "presenceNotation";
            rdfs:range  def-bwq:presenceCode .
                                
def-bwq:presenceCode
            a           rdfs:Datatype;
            api:label   "presenceCode"@en;
            .

def-bwq:abnormalWeatherException
            api:label   "abnormalWeatherException";
            rdfs:range  xsd:boolean .

def-bwq:latestComplianceAssessment
        a                   owl:ObjectProperty;
        api:label           "latestComplianceAssessment";
        rdfs:range          def-bwq:ComplianceAssessment .
        
def-bwq:latestSampleAssessment
        a                   owl:ObjectProperty;
        api:label           "latestSampleAssessment";
        rdfs:range          def-bwq:SampleAssessment;
        .
        
def-bwq:inYearDetail
        rdfs:range          def-bwq:BySamplingPointYearSlice;
        api:label           "inYearDetail";
        .
        
##########################################################
## OS Geometry
##########################################################
                                
geometry:extent
        api:label   "extent" ;
        rdfs:range   geometry:AbstractGeometry .
                            
geometry:asGML
        api:label   "asGML" ;
        rdfs:range  rdf:XMLLiteral .      
  
##########################################################
## Time and Intervals
##########################################################
time:inXSDDateTime
            api:label   "inXSDDateTime";
            rdfs:range  xsd:dateTime .

interval:ordinalYear
            rdfs:range  xsd:integer;
            api:label   "ordinalYear" .
  
interval:ordinalWeekOfYear
            rdfs:range  xsd:integer;
            api:label   "ordinalWeekOfYear" .
                                
interval:ordinalWeekOfYearYear
            rdfs:range  xsd:integer;
            api:label   "ordinalWeekOfYearYear" .  
                                
##########################################################
## Misc dataset metadata
##########################################################
dgu:uriSet
            api:label  "uriSet" ;
            rdfs:range dgu:URIset .

dgu:itemType
            api:label   "itemType";
            rdfs:range  rdfs:Class .

dgu:status
            api:label   "status";
            rdfs:range  rdfs:Resource .
            
                                
rdfs:seeAlso
            api:label  "seeAlso" ;
            rdfs:range  rdfs:Resource .

void:sparqlEndpoint
            api:label  "sparqlEndpoint" ;
            rdfs:range rdfs:Resource .

void:vocabulary
           api:label  "vocabulary";
           rdfs:range  rdfs:Resource .
           
void:subset
           api:label    "subset";
           rdfs:range   rdfs:Resource .

void:dataDump
           api:label    "dataDump";
           rdfs:range   rdfs:Resource .
           
           
void:Dataset
            api:label   "Dataset";
            a           rdfs:Class .
                                
void:uriRegexPattern
           api:label  "uriRegexPattern";
           a           rdf:Property .

void:exampleResource          
           api:label  "exampleResource";
           rdfs:range  rdfs:Resource .

##########################################################
## Zone of Influence          
##########################################################
def-zoi:ZoneOfInfluence
    a               owl:Class;
    api:label       "ZoneOfInfluence" .
    
def-zoi:zoneOfInfluence
    a               owl:ObjectProperty;
    api:label       "zoneOfInfluence" ;
    rdfs:range      def-zoi:ZoneOfInfluence .
    
def-zoi:zoiCode
    a   rdfs:Datatype;
    api:label       "zoiCode" .
    
def-zoi:zoiNotation
    a                   owl:DatatypeProperty; 
    rdfs:range          def-zoi:zoiCode;
    api:label           "zoiNotation" .

##########################################################
## Envelope
##########################################################
def-geom:Envelope
    a                  owl:Class;
    api:label           "Envelope";
    .

def-geom:envelope
    api:label           "envelope";
    rdfs:range         def-geom:Envelope;
    .


def-geom:lowerCorner
    a               owl:ObjectProperty;
    api:label        "lowerCorner";
    rdfs:range      def-geom:Point;
    .
    
def-geom:upperCorner
    a               owl:ObjectProperty;
    api:label        "upperCorner";
    rdfs:range      def-geom:Point;
    .

##########################################################
## Point
##########################################################
def-geom:Point
    a               owl:Class;
    api:label        "Point";
    .
    
def-geom:x
    api:label       "x_coord";
    a               owl:DatatypeProperty;
    rdfs:range      xsd:decimal;
    .
    
def-geom:y
    api:label       "y_coord";
    a               owl:DatatypeProperty;
    rdfs:range      xsd:decimal;
    .            

def-geom:z
    api:label       "z_coord";
    a               owl:DatatypeProperty;
    rdfs:range      xsd:decimal;
    .
 
def-geom:dimensions
    api:label       "dimensions";
    a               owl:DatatypeProperty;
    rdfs:range      xsd:decimal;
    .

def-geom:srs
    api:label       "srs";
    rdfs:range      rdfs:Resource;
    .
    
#################################################################
# BWP Additions
#################################################################
def-bwp:BathingWaterProfile
                             api:label       "BathingWaterProfile" ;
                             a                owl:Class
                             .
                             
def-bwp:EnduringBathingWaterProfile
                             api:label       "EnduringBathingWaterProfile" ;
                             a                owl:Class
                             .
                             
def-bwp:StandardLanguageCollection
                             api:label       "StandardLanguageCollection" ;
                             a                owl:Class
                             .
                             
def-bwp:countyName 
                             api:label       "countyName" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:standardLanguageCollection
                             api:label       "standardLanguageCollection" ;
                             a               rdf:Property
                             .
                             
def-bwp:bathingWaterDescription
                             api:label       "bathingWaterDescription" ;
                             api:structured "true"^^xsd:boolean;
                             a               rdf:Property ;                             
                             .
                             
def-bwp:applicableYear
                             api:label       "applicableYear" ;
                             a               rdf:Property ;
                             rdfs:range       interval:Year
                             .
                             
def-bwp:zoiDescription
                             api:label       "zoiDescription" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:streamsRiversStatement
                             api:label       "streamsRiversStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:eaInvestigationsStatement
                             api:label       "investigationsStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:historyStatement
                             api:label       "historyStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:stwOutfallsStatement
                             api:label       "stwOutfallsStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:esoOutfallsStatement
                             api:label       "esoOutfallsStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:localAuthorityStatement
                             api:label       "localAuthorityStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:misconnectionsStatement
                             api:label       "misconnectionsStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:workingWithFarmersStatement
                             api:label       "workingWithFarmersStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:workingWithIndustryStatement
                             api:label       "workingWithIndustryStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:workingWithPrivateOwnersStatement
                             api:label       "workingWithPrivateOwnersStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:macroAlgaeStatement
                             api:label       "macroAlgaeStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:phytoplanktonStatement
                             api:label       "phytoplanktonStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:webResImage
                             api:label       "webResImage" ;
                             a               rdf:Property ;
                             rdfs:range      rdfs:Resource ;
                             .
                             
def-bwp:printResImage
                             api:label       "printResImage" ;
                             a               rdf:Property ;
                             rdfs:range      rdfs:Resource ;
                             .
                             
def-bwp:pollutionManagementGeneralStatement
                             api:label       "pollutionManagementGeneralStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:stwOutfallsGeneralStatement
                             api:label       "stwOutfallsGeneralStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:esoOutfallsGeneralStatement
                             api:label       "esoOutfallsGeneralStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:localAuthorityGeneralStatement
                             api:label       "localAuthorityGeneralStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                             
def-bwp:algaeGeneralStatement
                             api:label       "algaeGeneralStatement" ;
                             a               rdf:Property ;
                             api:structured "true"^^xsd:boolean;
                             .
                          
def-bwp:latestBathingWaterProfile
                         api:label          "latestProfile" ;
                         a                  rdf:Property ;
                         rdfs:range         rdfs:Resource ;
                         .
                         
version:versionString
                             api:label       "versionString" ;
                             a               rdf:Property
                             .
                             
version:interval             api:label       "interval" ;
                             a               rdf:Property ;
                             rdfs:range      rdfs:Resource ;
                             .
                             
version:currentVersion       api:label       "currentVersion" ;
                             a               rdf:Property ;
                             rdfs:range      rdfs:Resource ;
                             .
                             
time:inXSDDateTime
                             api:label        "inXSDDateTime" ;
                             a                rdf:Property;
                             rdfs:range        xsd:dateTime
                             .                            

time:hasBeginning
                            api:label         "beginning" ;
                            a                 rdf:Property ;
                            rdfs:range        rdfs:Resource ;
                            .
                            
time:hasEnd                 api:label         "end" ;
                            a                 rdf:Property ;
                            rdfs:range        rdfs:Resource ;
                            .
                            
dct:hasVersion             api:label          "hasVersion" ;
                           a                  rdf:Property ;
                            rdfs:range        rdfs:Resource ;
                           .
                           
dct:isVersionOf            api:label          "isVersionOf" ;
                           a                  rdf:Property ;
                           rdfs:range         rdfs:Resource
                           .
                           
stats:localAuthority       api:label          "localAuthority" ;
                           a                  rdf:Property ;
                           rdfs:range         rdfs:Resource 
                           .                           

## bathing water profile feature short names

def-feature:Feature
                          api:label         "Feature" ;
                          a                 owl:Class
                          .

def-feature:EnduringFeature
                          api:label         "EnduringFeature" ;
                          a                 owl:Class
                          .

def-feature:DO
                          api:label         "DO" ;
                          a                 owl:Class
                          .

def-feature:ESO
                          api:label         "ESO" ;
                          a                 owl:Class
                          .

def-feature:RSI
                          api:label         "RSI" ;
                          a                 owl:Class
                          .

def-feature:SWO
                          api:label         "SWO" ;
                          a                 owl:Class
                          .

def-feature:TSO
                          api:label         "TSO" ;
                          a                 owl:Class
                          .
                          
##########################################################################
# SuspensionOfMonitoring
##########################################################################
def-som:SuspensionOfMonitoring
                        api:label           "SuspensionOfMonitoring";
                        a                   owl:Class;
                        .   

def-som:startOfSuspension
                        api:label           "startOfSuspension";
                        rdfs:range          xsd:dateTime;
                        .

def-som:endOfSuspension
                        api:label           "endOfSuspension";
                        rdfs:range          xsd:dateTime;
                        .
                        
def-som:expectedEndOfSuspension
                        api:label           "expectedEndOfSuspension";
                        rdfs:range          xsd:date;
                        .

def-som:somID           a                   rdfs:Datatype .
def-som:notation        api:label           "som_notation";
                        rdfs:range          def-som:somID;
                        .
                        
def-som:recordDateTime  rdfs:range          xsd:dateTime;
                        api:label           "som_recordDateTime";
                        .
                        
########################################################################
# Suspension of Monitoring RecordStatus removed (not needed)
########################################################################
#def-som:recordStatus    rdfs:range          def-som:RecordStatus;
#                        api:label           "som_recordStatus";
#                        .
#
#def-som:RecordStatus    a                   owl:Class;
#                        api:label           "som_RecordStatus";
#                        .
#
#def-som:open            api:label           "som_open" .       
#def-som:update          api:label           "som_update" .       
#def-som:closed          api:label           "som_closed" . 
########################################################################

def-som:priorAssessment
                        rdfs:range          rdfs:Resource;
                        api:label           "priorAssessment";
                        .       
                       
def-som:followingAssessment
                        rdfs:range          rdfs:Resource;
                        api:label           "followingAssessment";
                        .       

def-som:priorSuspension
                        rdfs:range          rdfs:Resource;
                        api:label           "priorSuspension";
                        .       
                       
def-som:followingSuspension
                        rdfs:range          rdfs:Resource;
                        api:label           "followingSuspension";
                        .                        
                     
def-som:relatedAssessment
                        rdfs:range          rdfs:Resource;
                        api:label           "relatedAssessment";
                        .                        
                                                           
def-som:relatedSuspension
                        rdfs:range          rdfs:Resource;
                        api:label           "relatedSuspension";
                        .           
             
##########################################################################
# Short Term Pollution Predictions
##########################################################################
def-stp:expiresAt  rdfs:range  xsd:dateTime ;
        api:label       "expiresAt" ;
        api:structured  true .

def-stp:samplingPoint
        rdfs:range  rdfs:Resource ;
        api:label   "stp_samplingPoint" .

def-stp:RiskPrediction
        a          rdfs:Class ;
        api:label  "RiskPrediction" .


def-stp:publishedAt  rdfs:range  xsd:dateTime ;
        api:label       "publishedAt" ;
        api:structured  true .

def-stp:predictedAt  rdfs:range  xsd:dateTime ;
        api:label       "predictedAt" ;
        api:structured  true .

def-stp:RiskPredictionDataSet
        a          rdfs:Class ;
        api:label  "RiskPredictionDataSet" .

def-stp:riskLevel  rdfs:range  rdfs:Resource ;
        api:label   "riskLevel" .

def-stp:latestRiskPrediction
        a           owl:ObjectProperty ;
        rdfs:range  rdfs:Resource ;
        api:label   "latestRiskPrediction" ;
        .

def-stp:bathingWater  rdfs:range  rdfs:Resource ;
        api:label   "stp_bathingWater" .

def-stp:predictedOn  rdfs:range  xsd:date ;
        api:label       "predictedOn" ;
        api:structured  true .

def-stp:normal
        api:label   "normal" .

def-stp:unknown
        api:label   "unknown" .

def-stp:increased
        api:label   "increased" .
                        
